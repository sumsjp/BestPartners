大家好，这里是最佳拍档，我是大飞
我们都听过很多成功创业公司的故事
在这些故事中
它们成功的经验感觉都是类似的
比如说选对方向、持之以恒
think big think long，等等等等
但是失败的创业公司
却可能有千差万别的原因
比如说决策者错误的判断、过度自信或者领导的自恋、甚至是那些过于臃肿的流程
今天我们这期视频
会尝试整理一些可能导致创业失败的创业方式
在我们不知道「怎么做才能成功」的时候
或许知道「不要怎么做」，
也是一种解题的办法
我们先从一本看起来跟创业无关的指导手册开始讲起
1944年，美国中央情报局
也就是CIA的前身，战略情报局OSS
编写了一本《简单破坏现场手册 (Simple Sabotage Field Manual)》，
用来帮助美国海外的官员
在挪威和法国等被占领国家培训「公民破坏分子」。
手册中为潜伏者列出了一些破坏当地公司生产力的方法
其中一些建议至今看上去仍然不过时
比如关于「干扰组织和生产」的部分中
就这么写到
坚持所有事情都要走「正规渠道」，
绝不允许为了加快决策速度
而走捷径
尽可能频繁且冗长地发表「演讲」，
用长篇故事和个人经历来说明你的「观点」，
别忘了要再加上几句「爱国」评论
把所有事情提交给委员会「进一步研究和考虑」，
并且试着让委员会变得尽可能的臃肿
至少5个人以上
尽可能频繁地提出不相关的问题
对通信、会议记录、决议的措辞斤斤计较
回顾上次会议已经决定的事项
并且试图重新讨论这些决定的可行性
提倡「谨慎」，保持「理智」，
并且敦促同事们避免可能导致尴尬或者困难的匆忙行动
担心任何决定的适当性
不断质疑这些行动是否在小组的管辖范围内
或者是否可能与上级政策相冲突
好了
假设现在有一家互联网或者AI创业公司
雇佣你成为它们的CTO
那么你如何能在不被发现的情况下
尽可能长时间地破坏这家公司的生产力呢
注意
你不能做出一系列明显的错误决定
因为这样很快你就会被解雇
我们真正的目标
是慢慢地削弱公司的生产力
同时保持表面上的合理和正常
好了
接下来我们看看究竟可以怎么做
首先是技术层面
我们可以做以下这些事情，比方说
我们需要让技术开发变得尽可能的复杂
当你加入公司后
可以找一个适当的机会
要求团队用6-18 个月的时间重写公司的核心系统
并且把责任推给前任的CTO
同时，鼓励团队中的每个人
可以使用自己喜欢的语言和框架
在进行系统设计的时候
可以将系统任意地分割为多个部分
而且分割出来的、涉及某些特定功能的系统越多越好
鼓励复杂的开发设置
至少得运行一个有十几个服务的服务网格
才能把系统跑起来
而且要保证生产环境与开发环境尽可能的不同
尽可能少地发号施令
但是要不断地告诫团队
在决策时要保持极端的谨慎
同时利用任何生产上的问题
作为技术研发「刹车」的理由
为代码变更和常见的工作流
引入非常复杂的流程
并且把原因归咎于「安全」或者「合规」。
确保每个任务都在系统中有人跟进
而且要经过至少5个人的审查、优先级排序和签字
禁止做任何超出原有任务范围的事项
比如代码清理
或者其他偶然可能的改进
在技术团队内部
开发所有不属于核心竞争力的东西
并且美其名曰「为了避免被供应商绑架」。
坚持在所有事物上添加抽象层
同时使用本身就抽象的供应商
然后再添加额外的抽象层
鼓励根据极其乐观的业务预期
来做出技术决策
怎么也要计划比现有的系统负载高出三个数量级
鼓励系统的共同所有权
确保没有人能对维护负责
坚持将几乎所有系统和功能
都集中化为所谓的「平台」，
然后让专门的平台团队来负责
但是又要保持平台团队的人手不足
同时阻止其他团队开发任何可能属于平台的东西
让平台团队频繁的迭代API
保持各个API版本之间无法兼容
并且要求其他团队
尽可能频繁地重构代码
来适应最新的API版本
雇用尽可能多的「架构师」，
要求任何大小变更都要进行「架构审查」，
即便是很小的一个代码变更
也要进行「安全审查」。
鼓励使用新的、小众的开源或者第三方库
最好文档和使用用例都不是很完善
并且冠以升级、趋势、前沿等词汇
好了，技术方面的调整差不了之后
我们再来看看产品层面
首先在产品上
要主推大战略、大规划
以学术上的理由忽略掉有用的指标
比如认为指标有偏向性
或者认为指标过于滞后
无法及时反映变化
选择与业务价值相关性较低
并且噪声较大的虚假指标
坚持将任何产品上的变动
都当作是一个「大的赌注」，
坚持要求把所有的工作都做完、所有流程都走完
才能上线产品
认为每个功能都是用户所必需的
并且是产品第一个版本的关键部分
绝不妥协
制定极其详细的「战略」计划
同时如果有机会
尽量频繁的调整产品方向
将一些明显的功能改进
视为产品的局部优化
不要投入充足的资源来做
利用行业的最新发展趋势来占据产品团队的资源
让产品经理花大量的时间去调研行业趋势、竞品分析
但是实际上还是按照自己的想法来设计
启动一个看似合理但是极其空洞的AI战略
在这些方面花大价钱来请供应商和咨询顾问
鼓励产品经理将大部分的时间
花在产品的「战略」和「规划」上
多开会进行头脑风暴
设置一些障碍
让工程师和产品经理很难、甚至无法在内部
使用自己设计和开发的产品
在部门内部把用户看作是极其「愚蠢的」，
认为用户的反馈和建议不值一提
好了，现在
产品和技术团队的执行工作基本都搞定了
该来教他们怎么做一做向上管理了
首先
我们要让团队的汇报关系变得尽可能的复杂
不仅有小组长、Team Lead
还要有主管、经理、政委
能想到的管理职位都要配上，同时
在汇报结构中使用大量的虚线汇报
比如让一个员工
向其他团队、地点或者职能部门的经理汇报
让他搞不清谁是自己的直接上司
同时确保经理没有能力监督他们的下属
然后
将团队人员的薪酬与职位头衔挂钩
并且将头衔与团队的规模挂钩
从而激励各经理领导的团队开始膨胀、扩张
在团队内部要大谈战略、功能规划或者技术的复杂性
并且以此要求来🙆统一团队的想法
以进入新的产品领域的名义
进行昂贵的收购
再以「协同效应」为理由
关闭收购的产品
频繁地将表现不佳的员工
重新分配到其他绩效较好的团队中
美其名曰培养员工
同时，将高绩效的员工
分配到投机性高、而且交付成果不明确的研发项目上
美其名曰创造机会
任何决策都要开会
无论决策的内容多么的微不足道
而且坚持让每个与会议主题有关的「利益相关者」，
都要出席会议
最好开会后还要安排专人整理会议纪要
并且上传到公司的知识库中
或者分享到团队的工作群
要求大家已阅或者点赞
好，现在团队内部都梳理得差不多了
来看看团队之间怎么做
在招聘方面
尽量要把合适的人才排除在外
比方说
你可以创建一个看似客观、但是实际上绝对主观的招聘流程
然后以「不符合公司文化要求」，
或者其他模糊的标准为理由
拒绝表现最好的候选人
同样
你可以根据「发展潜力」或者「工作态度」，
以及其他模糊的标准
雇用面试时表现最差的候选人
然后招募一些非常贵的高级领导
并且对他承诺可以有大量的人员编制或者Hire count
使用夸大的头衔和虚构的职位
来吸引更多的机会主义者
雇用一些在垂直领域高度专业化的所谓「专家」，
搞一些与主营业务完全无关紧要的项目
来防止他们辞职
然后以专业化为借口
雇用更多在专业上可以形成「互补」的专家进来
在项目管理层面上
尽量要求项目之间要跨部门的合作
一个项目要鼓励尽可能多的团队一起参与
最好是在不同地点、不同时区、不同专业领域的团队
同时对任何一个项目
都要进行非常详细的财务预算
并且严格按照预算执行
在新增项目需求的时候
最好要依赖于其他团队的工作完成
才能确定需求
尽可能多的去外部找一些昂贵的代理机构
让项目的范围变得越来越模糊
并且将还没有完成的项目原型
交给内部的团队来完成
对于项目中的重要环节和团队
要同时安排两个以上
并且让他们都觉得自己才是负责人
最后，要为其他团队中的利益相关者
构建一个复杂的「自助」系统
让项目上的任何一点变动
都会被各个利益相关者知晓
好了
以上就是一些你可以破坏公司生产力的方法
当然，要完美地执行它们并不容易
不过
如果你能够进入竞争对手的战线后方
想办法努力取得CTO的职位
那么就有机会能够实现这些目标了
需要注意的是
生产力的问题通常是由无数的小问题累积而成的
这些小问题本身虽然并不会一下子毁掉生产力
但是，生产力是按对数尺度来增长的
也就是说
所有这些问题会以乘法的方式复合累积
举个例子
如果你做了100件破坏生产力的事情
每件事都让生产力降低了5%，
那么最终你会把整体效率减慢了131倍
所以
你不需要制定大的政策变化或者调整
只需要多在小的方面努力就可以了
现在大家已经知道了如何搞垮一家创业公司了
如果你正好在一家创业公司工作
看看有多少条中招了呢？
感谢大家的观看，我们下期再见
