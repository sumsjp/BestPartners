大家好，这里是最佳拍档，我是大飞
在AI开发工具的生态系统里
LangChain一直是一个口碑两极分化的产品
看好LangChain的人
欣赏它丰富的工具、组件和易于集成等等特点
而不看好LangChain的人
认为它注定失败
因为在这个技术变化如此之快的年代
用LangChain来构建一切，根本不可能
最近，一篇LangChain的吐槽文章
再次成为大家热议的焦点
文章标题叫做《为什么我们不再使用LangChain
来构建我们的AI Agents》，
作者法比安·博思Fabian Both
是AI测试工具Octomind的深度学习工程师
在工作中
他会使用多个大语言模型的AI Agent
来自动创建和修复Playwright中的端到端测试
因此在使用LangChain方面
有着丰富的实践经验
文章中他回顾了自己一年多的亲身经历
从选择LangChain开始
随后与LangChain进行了顽强的斗争
最终决定弃坑LangChain
今天
我们就来看看文章作者究竟都经历了什么
首先
作者的团队是从2023年初开始使用LangChain的
直到2024年将它移除
使用了一共超过12个月的时间
在2023年的时候
LangChain可以说是团队当时最佳的选择
不仅拥有一系列令人印象深刻的组件和工具
而且人气飙升
LangChain当时的口号是
让开发人员一个下午
就能够将一个想法变成可以运行的代码
一开始一切都很正常
但是随着产品的需求变得越来越复杂
问题也开始浮出水面
LangChain逐渐从一个生产力工具
变成了阻碍生产力的源头
首先面临的就是LangChain的不灵活
众所周知
如今的人工智能和大语言模型可以说是瞬息万变
每周都会出现新的概念和想法
而LangChain故意将许多细节做得很抽象
导致使用者无法轻松编写底层的代码
在需求比较简单的时候
LangChain还能帮的上忙
但是它的高级抽象
很快就会让代码变得越来越难以理解
维护过程也变的越来越困难
当法比安的团队开始发现
用在理解和调试LangChain的时间
和用在开发功能上的时间一样的时候
这就意味着不是一个好兆头了
具体来说
法比安通过一个很小的示例
也就是将一个英语单词
翻译成意大利语
来说明了LangChain抽象方法的问题
我们先来看一个使用OpenAI的Python实现
这段代码可以说相当的简单易懂
只包含了一个类和一个函数调用
其它部分都可以说是标准的Python代码
我们再来看看LangChain的版本
代码看上去很类似
但是请注意一下细节
LangChain的代码里不仅含有三个类和四个函数调用
更令人担忧的是
LangChain引入了三个新的抽象概念
分别是，Prompt模板
这个是为大语言模型提供Prompt；
输出解析器
用来处理大语言模型的输出；
还有一个chain
也就是覆盖了Python或（|）操作符的LangChain表达式语法LCEL
可以看到，LangChain所做的
除了增加了代码的复杂性
并没有带来任何明显的好处
这种代码早期来说可能没什么问题
但是如果要想用到生产环境
理论上我们应该对每个组件都比较了解
这样在代码实际运行时才不至于出现意外的崩溃情况
那么什么是好的抽象呢
我们可以看看Python中的代码实现
比如这个从API中获取JSON输出的代码
使用了Python内置的http包
以及使用requests包的代码实现
应该说，相比之下
水平高下是显而易见的
好的抽象不仅可以简化代码
还可以减少理解代码所需要的认知负担
虽然LangChain试图通过隐藏一些实现细节
让你能用更少的代码完成更多的工作
但是
如果这是以牺牲简单性和灵活性为代价的
那么抽象就失去了价值
LangChain的另一个问题是嵌套抽象
也就是它经常会在其他抽象之上
使用抽象
因此开发人员不得不从嵌套抽象的角度
来思考如何正确使用API
这就不可避免地会导致
开发人员要去理解庞大的堆栈跟踪
并且花费大量时间
去调试那些跟实际功能代码无关的内部框架代码
我们再来看看LangChain对法比安团队实际的开发影响
一般来说
AI的应用程序都会大量使用AI Agent
来执行不同类型的任务
比如说发现测试用例、生成Playwright测试和自动修复代码等等
而当法比安他们想从单一的顺序Agent架构
转向更复杂架构的时候
LangChain立刻就成为了制约因素
比方说，生成Sub-Agent
并让它们与原始的Agent互动
或者让多个专业Agent相互交互
法比安还举了另一个具体的例子
那就是他们想要根据业务逻辑和大语言模型的输出
动态改变Agent可以访问的工具
但是LangChain并没有提供从外部来观察Agent状态的方法
这导致开发团队不得不缩小这个功能的实现范围
来适应LangChain Agent有限的功能
相当于开发团队被框架给绑架了
因此
法比安和团队最终下决心删除了LangChain
在这之后
技术团队仿佛得到了真正的解脱
不仅工作更加高效了，内耗也少了
事后
团队仔细反思并且复盘了这个问题
他们认为，长期来看
不使用框架是更好的选择
看上去
LangChain好像提供了很多的组件
让人感觉开发一个大模型驱动的应用程序
好像是很复杂的
但是其实并不是这样
核心的组件只有那么几样
第一个，用于大模型通信的客户端
第二个，函数或者调用函数的工具
第三个
用于RAG的向量数据库，第四个
用于追踪、评估等功能的可观测平台
其余的组件
要么是这些核心组件的辅助
比如向量数据库的分块和嵌入
要么只是完成常规应用程序的任务
比如使用数据持久化和缓存
来管理文件和应用程序状态等等
虽然不使用任何框架
肯定会增加前期开发的工作量
比如需要一些时间来组建自己的工具箱
但是俗话说的好，磨刀不误砍柴工
这些时间
对于技术团队和应用程序的未来来说
都是值得的
更何况，其实很多情况下
使用大语言模型的流程都是非常简单直接的
开发人员主要就是编写顺序代码、迭代提示
并且提高输出的质量和可预测性
绝大多数任务
其实都可以通过简洁的代码和较小的外部包集合来实现
即使用到了agent
也不一定需要框架才能实现
在处理业务逻辑的时候
一般只需要在预定的顺序流中
进行agent之间的通信
处理它们的状态和响应
实际超出这个范围的工作内容并不多
而且对于AI创业公司来说
创新和迭代的速度
才是衡量成功最重要的指标
因为AI领域的许多发展都是由实验和原型设计驱动的
这就意味着
代码库需要尽可能的保持精简、而且适应性强
才能最大限度地提升开发人员的学习速度
每个迭代周期才能产生更多的价值
而框架通常是为了匹配现有的使用模式、人为设计出的一种代码结构
但是大语言模型驱动的应用
其实还在早期的发展阶段
并没有固定的使用模式
当你不得不将创新的想法
翻译成特定于某个框架的代码的时候
就会限制了迭代的速度
因此，相比于使用框架
更好的办法是使用builing blocks
也叫构建基本块
通过简洁的底层代码和精心挑选的外部依赖包
保持架构的精简
从而让开发人员可以专注在真正需要解决的问题上
最典型的例子就是向量数据库
这就属于已知类型的模块化组件
只有基本的功能
因此也可以轻松被更换或者取代
所以，法比安所在团队目前的策略是
完全不使用任何框架
用尽可能少的抽象进行模块化构建
从而让开发过程更快、更流畅
最后，虽然LangChain的槽点很多
但是法比安也并不是想过分地苛责LangChain
毕竟当一个事后诸葛亮总是容易的
应该说，某种程度上
这些缺陷都是无法避免的
因为在AI这样快速变化的领域
想要设计出经得起时间考验的抽象和API
是非常困难的
不过，这篇文章发表出来以后
还是得到了很多人的响应
文章底下有很多附和的评论
表示LangChain框架有种代码糟糕的感觉
而且把使用LangChain描述为一条「充满雷区的道路」。
甚至还有人形容
LangChain的抽象就是死亡的定义
不过
也有人表示会继续坚持使用LangChain一段时间
jivochat的cofounder
蒂姆·瓦利舍夫Tim Valishev就在推文中回复
虽然LangChain的抽象过于复杂
框架的内部工作原理也需要时间理解
但是Langsmith还是给加了不少分
不仅有开箱即用的可视化日志
还提供了Prompt playground和versioning
也可直接从日志中轻松地构建测试数据集
并且在代码中进行端到端的测试
那么大家对LangChain框架的现状和发展是怎么看的呢
你有没有在实际项目中使用LangChain呢？
欢迎在评论区留言，感谢大家的观看
我们下期再见
