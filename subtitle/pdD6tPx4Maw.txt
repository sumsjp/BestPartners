大家好
这里是最佳拍档
我是大飞
我们都知道ChatGPT
有很强大的学习理解和生成的能力
但是ChatGPT甚至是GPT-4
在一些专业的任务中
仍然面临着很多的困难
因为他们在预训练的时候呢
缺少足够的领域特定的数据
或者呢他们在执行一些
准确的神经网络计算中
也会经常的出现错误
那其实除了ChatGPT以外呢
还有很多现有的模型和系统
比如说一些基于符号的
一些基于神经网络的
他们可以非常好的完成
一些领域特定的任务
但是由于不同的实现或者是工作机制
他们与基础的模型呢无法兼容
而另一方面
人工智能的用例
或者说是应用场景是无穷无尽的
不仅能够在数字世界中提供帮助
而且也可以完成各种物理世界中的任务
包括从照片的处理到控制智能家居设备
它的可能性超出了人们的想象
因此我们就需要一种机制
既可以利用基础的模型
提出一个解决任务的大概方案
然后自动将方案中的一些具体的子任务
与其他具有特殊功能的模型
和系统的API进行匹配
一起工作来完成整个任务
没错
这听上去有点像Autogbt干的事对吧
其实呢除了Autogbt
微软最近发布的TaskMatrix.AI
也是这样的一种机制
我觉得呢它更像是一种架构的规范
或者说是设计的规范
可以将基础的模型
与数百万个API连接起来
从而一起来完成复杂的任务
它结合了Toolformer和ChatGPT
可能会是大语言模型
发展的另一个未来的方向
那关于Toolformer呢
我们回头会给大家做一期节目
详细介绍一下
这个玩意呢才是个真正的大杀器
今天呢先给大家介绍一下TaskMatrix.AI
主要的内容呢来源于它的论文
当然为了方便大家理解呢
去掉了一些纯数学
或者计算层面的一些东西
有能力的朋友
还是尽量去看原始的论文
这样的话理解可能会更加透彻
那我们已经提到过了TaskMatrix.AI呢
可以将基础的模型
与现有的其他的模型
以及各种API相结合
用来服务于各种各样的任务
那它到底有什么特点呢
它的主要优势有以下4点
第一点
它能够将基础模型作为核心系统
来理解不同类型的输入
例如文本图像视频音频和代码
然后生成调用其他API的代码
来完成各种数字和物理世界的任务
第二点
TaskMatrix.AI提供了一个API平台
作为各领域任务的存储库
这个平台上的所有的API
都有统一的文档格式
这就让基础模型更加容易使用
开发人员也更加容易添加新的API
第三点
TaskMatrix.AI具有强大的终身学习的能力
它可以通过向API平台
来添加具有特定功能的新的API
从而扩展处理新功能的能力
第四点
由于任务的处理逻辑
也就是具体要执行的代码
以及API的结果都是可以被理解的
所以TaskMatrix.AI具有更好的可解释性
那接下来呢
我们介绍一下TaskMatrix.AI的整体架构
它有四个主要的组成部分
第一个多模态对话基础模型
也就是Multimodal Conversational Foundation Model
简称MCFM
这个基础模型呢
负责与用户之间进行通信
理解他们的目标和多模态的上下文
并且基于API来生成可执行的代码
来完成某个特定的任务
第二个部分API平台
这个平台呢
主要是为了提供一个
统一的API文档模式
来存储具有不同功能的数百万个API
并且允许API开发人员或者是API的所有者
注册更新和删除他们的API
第三点API选择器
根据MCFM
也就是多模态的对话基础模型
对于用户命令的理解
来推荐相关的API
第4点API执行器
它可以通过调用相关的API
执行生成的代码
并且返回中间和最终执行的结果
这四个子系统呢是共同工作的
大概的工作流程是这样的
首先
MCFM作为和用户交流的主要接口
可以理解用户输入的多模态的上下文
然后
API平台又提供了一个统一的API文档模式
以及一个存储了数百万API的地方
而API选择器呢
根据MCFM对于用户目标的理解
来推荐相关的API
最后API执行器再执行
由相关API生成的操作代码
并且返回最终的结果
此外呢TaskMatrix.AI的研究团队
还利用了基于人工反馈的强化学习
训练了一种奖励模型
这个模型呢可以用来优化任务的矩阵
也就是TaskMatrix
从而帮助MCFM和API选择器找到最优的策略
提高对复杂任务的处理能力和性能
那我们接下来呢
进一步详细的介绍一下各个子系统
第一个子系统呢
就是多模态的会话基础模型MCFM
它一共有4个输入
分别是基础模型的参数
API平台 用户指令 以及会话上下文
那通过这些输入呢
基础模型就可以生成对应的可执行代码
来完成用户的指令
此外呢
一个理想的多模态会话基础模型MCFM
应该具有呢以下四个功能
第一点它可以获取多模态的输入
并且根据指定任务的API
生成可执行的代码
第二点呢
他可以从用户的指令中
提取出指定的任务
并提出一个解决方案的大纲
第三点呢
他知道如何根据API的文档来使用API
并且可以根据常识和API的使用记录
将API与指定的任务进行匹配
第四点呢
它应该包含一个明确的代码验证机制
来确认可执行代码的可靠性和可信信
应该说ChatGPT和GPT-4都具备
MCFM的这些能力
都可以作为一个基础的模型视力
不过呢GPT-4会更加适合
因为它支持了多模态的输入
第二部分呢是API平台
这个API平台呢有两个主要的功能
管理和存储API文档
以及管理API的开发者
或者是API的所有者
API平台上的文档模板
应该都是统一的模式
每个API的文档
都应该包括5个方面的内容
第一点API的名称
用来提供API的概要介绍
并且作为API执行器的执行入口
第2点参数列表
包括输入参数和返回值
每个参数呢都应该有名称说明
数据类型和默认值
第三点呢API的详细的描述
包含有关API的功能工作原理 输入和输出
以及可能的错误或者是异常的信息
第4点API的应用示例
这个是可选的
主要用来展示如何来使用这个API
第5点API的组合指导
这个也是可选的
用来说明如何组合多个API
来完成复杂的用户指令
其实前四项呢
和一般的API文档定义和管理
并没有太大的区别
主要是第五项API的组合指导
这块可以发挥的空间非常大
而且可以整的非常复杂
那在官方的论文中
也给出了一个API文档的示例
我们可以看到
这个API的名称是open local file
也就是打开一个本地的文件
然后介绍了这个API的参数
分别是文件的路径和打开模式
然后对参数进行了详细的说明
比如说文件路径
应该使用绝对路径或者是相对路径
打开模式可以是指读或者是可写
那API返回的应该是一个File对象
或者是OSError的错误
然后是对这个API的一个描述说明
以及使用示例
最后的组合指导内容
介绍了这个API可以和
close local file的API结合使用
在文件读取和操作完毕后
用来关闭文件
这是一个很简单的API
有一点计算机基础的
应该都可以看得懂
那第三个部分就是API选择器
它主要从API平台中
识别和选择最适合任务需求的API
一方面
它可以通过语义检索来查找相关的API
从而避免呢让平台拥有过多的API
另一方面呢
它还可以利用模块的策略
来快速定位到相关的API
这个模块的策略
就是指的是根据API的业务领域
将API组织成特定的包或者模块
这样就可以快速定位到所需要的API
其实这部分我觉得是一个很核心的地方
会存在几个问题啊
第1点API Hell
也就是API 地狱
这个其实是一个悖论
一方面呢
我们希望平台上的API越多越好
另一方面呢也不希望他太多
否则你就不知道该选择哪个了
第二点同类API的选择问题
比如说打开文件
可能有5个API都能干这个事
那究竟选谁呢
第三点仅仅靠语义检索
其实还是很难精准定位API的
这里边可能还得引入机器学习的算法
以及大量人工的分类和标注
至少呢从我看来
这个API选择器能否做的足够好
才是这个架构能否很好应用的关键
第四部分API执行器
它主要就是用来执行代码的
能够执行从简单的HTTP请求
到多个输入参数的复杂算法
甚至是AI模型
这个执行器还需要一个验证的机制
来提高代码执行的准确性和可靠性
并且呢要确认生成的代码结果
是否符合人类指定的任务
那除了这四个部分以外呢
还有一块就是基于人类反馈强化学习
RLHF的奖励模型
这个主要是用来增强MCFM和API选择器
也就是来解决
我刚才提到的API选择器的问题
那这个模型
包括了给API开发者的反馈
以及对于API开发者的API
是否完成了任务的反馈
也就是说他把API文档
也当做是一种可学习的参数
这样在不断的使用过程中
就可以逐渐的筛选出质量好的API
以及提高API的匹配度和精准度
那么我们讲到这里TaskMatrix.AI
到底可以帮助解决哪些任务呢
论文里呢也列举了一些场景
首先是视觉任务的场景
那基于MCFM的多模态特性
TaskMatrix.AI
可以执行视觉理解和处理的任务
并且能够将语言和图像作为输入
在这个例子中我们可以看到
他可以把手绘的苹果草图
变成一副苹果的实体图
然后再变成一幅油画
也能够理解图片的背景
还能够保持原有的风格
从一个苹果图
再生成一副老人的图片
然后再把这个图片转换成一个深度图
又基于这个深度图
再生成了一张新的老人图
而且他还可以描述图片中的内容
以及对图片的内容
进行替换和编辑操作
那在这个过程中
就用到了很多图像处理的API和算法
那在这个示例中
演示了TaskMatrix.AI如何使用3个API的调用
分别是图像问答
图像文字和图像的对象替换
从而将一张花朵的图片
扩展到了2048x4096尺寸的一片花丛的图片
那第二个应用场景
是多模态长内容的生成
这个示例就是让TaskMatrix.AI
根据一篇图文文章
生成另一篇不同话题的图文文章
第三个应用场景是办公自动化
TaskMatrix.AI可以通过理解用户的语音指令
来执行办公自动化的任务
从而减少重复的工作量
比如说在这个示例中
我们给不同的PPT页面
加上了对应的公司的logo
然后对这些logo进行了统一的缩放
最后再统一的更换了
整套PPT的样式风格
第四个应用场景是物联网以及云服务
它可以实现智能家居的自动化
以家里的所有设备通讯
在这个示例中TaskMatrix.AI
可以完成闹钟叫早、开关冰箱、查询天气
打开汽车空调、播放电影、添加提醒
等一系列的操作动作
几乎可以满足日常的大多数任务
更多的示例
大家可以去看一下论文的原文
我会把论文的地址也放到评论区置顶
最后呢我们再讲一讲
TaskMatrix.AI所面临的一些挑战
缺点和局限性
这个可能也是Autogbt
HuggingGPT等一系列产品都会遇到的问题
首先呢如何确定TaskMatrix.AI
所需要的最小模态集合
并且对其进行训练
仍然是一件非常具有挑战的事情
而且创建和维护
一个要托管数百万API的平台
也有很多的挑战
包括API文档的生成
API质量的保证以及创建API的建议
因此这个API平台应该为API开发人员
提供进一步的指导
从而能够让他们不断创建出新的API
来完成新的任务
而用数百万个API来完成用户的指令
也会带来新的挑战
如何向MCFM推荐合适的API
就变得至关重要
那对于复杂的任务来说呢
TaskMatrix.AI
可能无法立即提出适当的解决方案
这个时候
MCFM应当与用户进行交互
尝试不同的可能的解决方案
直到找出最适合的方案
另外呢安全性和隐私性可能也是一个问题
我们需要验证模型是否完成了用户的指令
但是又不做出任何超出用户意图的事情
那数据的传输呢也应该是安全的
并且对于需要访问敏感数据的API
要进行授权的数据访问
最后如何提供个性化的策略
如何降低扩展的成本
以及如何与用户的少量示例对齐
也都是要面临的挑战
那对于TaskMatrix.AI的介绍呢
差不多就到这里了
应该说
像TaskMatrix.AI AutoGPT HuggingGPT这种思路
可能才是AI真正走进千家万户的方式
因为现实世界的很多任务
都是复杂的多样性的
很难粗暴简单的去解决
像现在ChatGPT这种
需要一轮一轮对话引导的方式
可能也还是比较麻烦
而大量API的集成
能够为AI带来更丰富的应用场景
从而让AI的模型真正充当大脑的角色
让API充当手和脚
其实像Zapier IFTTT这种自动化的工具
已经证明了这条路的可行性
这不禁让我想起
OpenAI的CEO Sam Altman
曾经提出过一个新的摩尔定律
那就是智能的数量每18个月会翻一翻
如果大语言模型再加上海量的API
可能这个速度就会更快的多
好了今天的分享就到这里
感兴趣的小伙伴们欢迎订阅我们频道
我们下期再见
