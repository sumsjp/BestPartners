大家好，这里是最佳拍档，我是大飞
先问屏幕前的各位一个问题
大家是几岁学会敲代码的呢？
大飞我那一代人
基本上都是在青年时期开始接触的计算机
学会敲代码基本已经是大学的时候了
之后的00后，05后
在小学就有了电脑课
听说江苏的一些初高中已经在教python了
而如今更年轻的一代10后
可能八岁就在捣鼓自己的网站了
在线学习网站 DesignCode 的创建者孟涛Meng To
最近在x平台上晒出了自己家八岁的孩子
在没有任何编码经验的情况下
利用 Claude AI 工具和 Cursor
建立了一个基于Three
js的网站
两个平台游戏、一个绘图应用、一个动画应用
以及一个 AI 聊天应用
每个项目也就花了他2个小时的时间
无独有偶，上周
Cloudflare 的副总裁也晒出了自己女儿使用 Cursor 的体验
她只需要用自然语言提出需求
Cursor 就能把需求转化成代码
在一句一句的对话中
一个 AI 聊天机器人就成型了
连8岁小孩都能轻松上手
Cursor 这几天可是狠狠火了一把
但是，在 Cursor 闯出名气之前
大模型本身的编码能力早就人尽皆知
市面上也早已经推出了多款 AI 编程软件
比如 GitHub Copilot
还有Devin、Genie等「AI程序员」，
能像人类软件工程师一样思考和行动
从需求到实现全都自动化
那么，Cursor 究竟有什么独特之处
能让各路开发者都赞不绝口呢？
我们节目大概在一年前介绍过Cursor
今天大飞就来带大家看看
如今它又增加了哪些新的能力
首先呢
我们再简单介绍一下什么是 Cursor
Cursor 其实就是一个集成开发工具
简称IDE
类似于大家经常使用的 VS Code 或者 Jetbrain 之类的开发工具
只不过它是基于AI的IDE
不过如今AI IDE也不是什么稀奇的玩意儿了
像 Github Coplit 之类的产品
已经可以让很多主流的IDE都变成AI IDE
Cursor 的特别之处很纯粹
那就是背靠着Claude 3.5 sonnet的它
性能够强
如果你曾经深入体验或者使用过 Copilot 和 ChatGPT 一段时间
应该会发现
要在程序员日常工作中使用它们
还存在着不少改进空间
比如
AI自动补全只能在光标所在的位置触发
这就会导致很多时候
你需要先删除一些代码
再让 Copilot 补全回来
举个具体的例子
如果你要给一个函数添加个参数
你就需要在很多调用它的地方把最后部分的括号删掉
再让 Copilot 补全，这就很麻烦
与此同时
虽然自动补全支持多行生成
但是用户经常会发现
其中有一些内容是自己不想要的
或者有些地方需要修改
这时候就会反复触发上面这种情况
先补全
再删一点，再补全
再删一点，让人感到十分崩溃
AI的死板也很影响用户体验，比方说
由于自动补全会遵守编程语言的规定
所以生成的代码一般是能运行的
但是带来的问题是如果你前面写的代码不对
那么后面的代码就生成不出来了
一个曲线救国的办法是先写注释
或者唤出 chat 来帮忙生成代码
但是这又很影响工作效率
除了编写代码以外
阅读别人写的代码
以及调试代码也非常花时间
这里本应该是体现chat优势的地方
但是这个工作流还是比较割裂的
比方说，你需要把错误信息拷贝下来
打开浏览器，访问 Claude，粘贴进去
等待结果
再选中相关的结果复制回来
在代码的特定地方进行修改
除了这个workflow很复杂以外
AI的能力上也有很多的限制
比如在 Copilot 的 chat 里
一般不支持联网搜索
而在线的devv等工具
又不知道你整个 codebase的信息
究竟该如何结合两者的优势呢？
这些问题都会导致Copilot之类的代码助手
很难进一步扩展自己的影响力
那我们再来看看 Cursor 是如何应对这些问题的
在自动补全方面
他们推出了一个新功能
叫做 Cursor Tab
它让Cursor不再局限于“补全”，
而是更广义的“编辑”。
比如我们前面提到的
给一个函数加个参数
那么在 Cursor Tab 里
它会自动识别出哪些地方调用了这个函数
然后帮你一次性把这些地方的调用
都加上这个新的参数
也就是说
按下 tab 后不再是在光标后补全
而是在整个文件的多个地方 apply 编辑改动
如果这么描述可能不太好理解
所以官网上给出了一些相关例子
比方说
AI能够预测用户下一个改动的地方
自动跳转
假设我们给一个函数加了类型注解
模型很快能够 get 到
我要给这个文件里的各种函数都加上类型注解
于是按tab就能跳到下一个改动
与此同时
Cursor还可以自动将伪代码转换为可执行的代码
即使记不住具体的 API
用户也不用再唤出chat了
直接写伪代码就好
Cursor 会帮你改成真实可运行的代码
Cursor Tab还整合了基于AI的重构功能
像传统IDE基本只能做rename
move 等基本操作，而有了Cursor Tab
之前提到的那些加参数、修改类型的操作
也能够自动帮忙生成和应用改动了
当然，Cursor还整合了chat功能
虽然这并不是它的原创
像aider之类的产品很早就推出了AI chat功能
不过Cursor把各种流程和体验细节做得非常完善
以前面提到的、使用devv等AI搜索工具的流程为例
现在用户可以在 Cursor 中直接打开 Chat
发出相关需求，Cursor 在完成响应后
会直接生成一个“pull request”，
可以直接在编辑器中看到各个改动
然后就跟平时的 code review 一样
你可以提出各种修改和后续的要求
也可以接受部分的改动
然后再对剩下的部分进一步沟通等等
这比我们从网站上把代码拷贝回来再修改
省下了一个CTRL+C加CTRL+V的时间
与此同时
Cursor 还能够将图片转化成代码
还记得在 OpenAI 的发布会上
从一张概念图到代码生成的演示吗？
靠着Claude3.5 sonnet的强大性能
Cursor把这个功能也实现了
由于背后有 codebase 的索引支持
Cursor还支持用@来指定文件、方法等上下文
从文档里看
Cursor还能给AI引入 git 提交信息、文档、以及整个文件夹等等
基本上是把程序员常用的上下文信息都考虑到了
哪怕你自己没有足够的信息也没事
Cursor还支持web搜索
这个功能可以在 chat 中用@Web来触发
配合devv的联网能力
用户可以直接查找到自己想要的信息
找到之后
Cursor还支持直接引入文档
自动索引新的知识
用户既可以用@Docs触发
也可以直接在@后面
把网页链接贴上去
举个例子
如果你正在用FastAPI 开发
那么就可以直接把 FastAPI 文档地址和git地址
扔给Cursor让它检索
进一步精确上下文中的信息
从而避免上网漫无目的地搜索
前面大飞说的两个八岁孩子
之所以能够在没有编程基础情况下开发各种软件
靠的就是这个功能强大而且全面的chat功能
就连安德烈·卡帕西 Andrej Karpathy也对Cursor的功能赞不绝口
他调侃道
如今最热门编程语言已经变成英语了
还连发几条推文夸赞 Cursor
说 Cursor 的体验已经碾压式地超过了 GitHub Copilot
老实说
大飞我每天看着海量的跟AI有关的新闻
对AI的发展基本上可以保持一颗平常心
但是，Cursor背后的开发团队
却依然足以让人刮目相看
我们都知道
虽然AI能力在这几年有了大幅的突破
但是想要给AI找到合适的场景
做出好用的应用的公司，却寥寥无几
而Cursor 团队的核心成员
最初仅由4个MIT的毕业生组成
分别是阿曼·桑格Aman Sanger、苏阿莱·阿西夫Sualeh Asif、迈克尔·特鲁尔Michael Truell和阿维德·伦内马克Arvid Lunnemark
翻看他们的履历
几个人之前都是在IBM沃森实验室、Google之类的顶流AI公司工作
若是换作一般人
恐怕就要在这些大公司干到退休了
但是他们没有
两年前，这四个高才生聚到一起
雄心勃勃的想要做一款全世界最好的 IDE
直到现在，两年时间过去了
他们也只有12名员工
要知道
Cursor在全球市场上面对的竞争对手是 GitHub Copilot
GitHub Copilot 不仅早在2021年就已经发布
并且团队规模也远超 Cursor
去年三月
Cursor虽然火了一小段时间
但是新鲜劲过去以后
很快大家就觉得它没戏了
因为当时GitHub Copilot 无论是在模型能力
还是功能的全面性上
都明显优于Cursor
而如今，情况则完全反了过来
就连安德烈·卡帕西Andrej Karpathy都亲自为Cursor站台
可以说双方的口碑已经发生了翻天覆地的变化
大公司固然有很多的资源
一个团队动辄就是几十上百人
但是与团队的规模相比
人才密度和信念永远是更重要的
翻看 Cursor 的博客
你可以找到这样一句充满雄心壮志的话
我们要打造一款前所未有的IDE
我们希望 Cursor 是一个让编程变得更加轻松、愉悦和有趣的工具
我们距离这个目标还有很长的路要走
要实现它
需要攻克很多棘手的工程问题、技术难点
以及聪明的产品思维
尽管如此，这是可能的
而且这是历史上第一次有这样的可能性
如果我们成功了
我们将重新定义编程的意义
并且帮助全世界的开发者专注于更大的问题
为了将这个愿景变为现实
我们正在组建一支由极具天赋的技术专家、研究人员和工程师组成的小团队
你将加入一个从中学时代就开始编程
对软件工程和人工智能充满热情的团队
你将解决这些棘手的问题
并进入到一个令人兴奋的环境
在这里，你将获得自主权
去完成你一生中最好的工作
看到这里
相信你也能很清晰地感觉到
创业公司的那股浪子劲儿头
这也是创业公司存在的意义
怀揣着一个比天高的梦想
然后脚踏实地的去干
在去年的时候
Cursor 的联合创始人阿曼·桑格曾经说过
当人们想到 AI 编程的时候
他们通常会想到由AI驱动的自动补全功能
我们认为 GitHub Copilot 和其他一些工具在这方面做得非常好
所以我们更加专注于自动补全之后的功能
比如说
查找和修复错误，以及代码库问答
事实上，他们也确实是这么做的
并且取得了用户体验上的突破
Cursor 的团队非常清楚
自己要把产品做成什么样子
以及当下哪些地方
软件工程师用起来不顺手
但是这些问题并不都是简单的功能问题
背后仍然隐藏着重要的技术挑战
就看他们是否能取得进一步的突破了
好了
以上就是对Cursor的最新介绍了
在投资完 Cursor 之后
a16z 曾经写过一篇文章
其中说道，“过去几十年里
各个公司都在不遗余力地迭代IDE
而现在，AI代码助手其实更加复杂
它需要找到一种新的、自然的、不干扰工程师正常工作的交互方式
这种产品其实很难做好
但是目前Cursor是AI编码工具中的佼佼者
它做对了
”也许，Cursor如今取得的一小步成功
会为以后的AIGC产品发展
开辟出一条更清晰的路径
那大家是如何看待Cursor这款产品的呢？
欢迎在评论区留言，感谢大家的观看
我们下期再见
