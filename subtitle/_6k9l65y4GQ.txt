大家好，这里是最佳拍档，我是大飞
当我们看一个开源项目时
基本都会看下他有多少star
虽然Github Star是一个比较虚荣的指标
但是却仍然有一定的实际意义
比如
很多开发者会关注Github Star的增长趋势
更多的star意味着会获得更多关注
更快的增长速度意味着短期受到的关注越大
而且
Star数量往往是技术选型的一个依据
毕竟大家都会倾向于选择更大众、更流行的技术
这样出了问题也不会轮到自己背锅
即便你的团队最终没有选择一个star很多的开源库
但是通常也不会一上来就选择一个star很少的库
如果我们换个思路
可能更能发现Github Star的价值
那就是软件开源并不一定意味着不赚钱
这也许只是一种产品开发的策略
就是拿开源软件来吸引大家的目光和流量
再为后续的商业服务
因此，star数量一定程度上
可以反映这种策略执行的是否成功
而策略执行是否成功
可能又会影响投资人的投资决策
以及团队能否以更低成本招募、甚至白嫖到优秀的开发人员
于是
有利益驱动就会有刷量、造假的行为出现
既然我们都知道
微博的僵尸粉都能影响广告主的投放决策
那Github Star造假就不足为奇了
那么，我们不禁要问
一个Github Star能值多少钱呢？
在网站baddhi
shop上
100个Github star的价格是8美元
而且是活跃用户
100%履约，一般都会有10%的折扣
而在buygithub
com上
100个Github star的价格是12美元
当然
你还可以购买Github的follower
fork以及watcher的数量
最近
开源编排平台Dagster的几位研究人员
就亲身体验了购买Github star的过程
Dagster首先建立了一个虚构的代码仓库
并购买了一堆star
然后
Dagster为该账户设计了个人资料文件
并使用GitHub REST API和GitHub Archive数据库
展开了一系列测试
可以看到
Dagster的代码仓库一夜之间就火了
而且跟它一起“蹿红”的项目还有不少
Dagster是在两个服务买了star
一个是我们之前提到的baddhi.shop，买了500个star
另一个是GitHub24，买了100个star
不过目前这个网站已经无法访问了
GitHub24在48小时内就交付了100颗star
而Baddhi Shop同样在一周内成功履约
不过，一个月后
GitHub24交付的star都还在
但是Baddhi Shop的star只剩下四分之三
那四分之一可能是被GitHub的团队给撤掉了
那么我们如何识别Star是刷的呢？
这里面又分成两类
第一种是一眼就可以看出是假的
卖家根本就不加掩饰
只要点开个人资料
就能马上看出这帮点star的用户根本不是真人
第二类是用心造假的
这个群体要复杂得多
账户上有很多相当真实的活动
借此掩盖了其假账户的事实
我们举个例子
对于这个zadahmed/music_recommender仓库
可以明显看到有部分点赞者的账号是同一天注册的
而且只有一天的活动记录
如果我们再深究一点的话
会发现这些点赞账号还有很多其他的共性
比如，这些账号的活跃度都极低
Follower都小于1
他们follow的项目也小于1
而个人公开的仓库数量小于4
且很多账号的个人信息
比如电子邮件、雇用信息、简历、博客和Twitter用户名都是空的
点star的日期
跟账户创建日期和更新日期都是同一天
这类共性让这些假账号很容易被系统识别
Github官方也会定期清理这些账号
所以，如果你花钱刷了1000个star
可能过一个月就都消失了
除了Github官方以外
还有一些工具可以识别假账号，比如
astronomer和fake-star-detector
所以对于那些想买Github Star的人来
要不就花点钱买点货真价实的
要不就干脆别买了，更何况
如果自己的项目好不容易做出点名气
但是被人扒出曾经刷star
也会是一件非常尴尬的事
那对比于这种有很明显特征的账号以外
有没有更不容易被发现的造假行为呢？
当然是有的
有些账号会模仿正常开发者的行为
于是光从行为数据上
很难将他们和正常开发者区分
那么这种账号怎么去发现呢？
这里dagster提供了一个检测思路
他们使用一种被称为unsupervised clustering
也就是无监督聚类的机器学习技术
大飞我以前做银行反洗钱的时候
也是主要用的类似的算法
按照常理来说
正常用户的特征应该比较分散的
就是说他的每项特征都比较独特
不会遵循某个大聚类的整体趋势
但是虚假用户的特征则有一定的相似性
所以在可视化之后会聚集在一起
通过这种办法
应该可以检测出目标账户是否属于可疑的聚类
简单来讲，我们可以用一组行为特征
来描述一个Github账号，比如
提交代码
给其他仓库提交PR
给某个项目点star
修改个人简介等等
这样就能将这个Github账号
表示为高维向量空间中的一个点
那些向量空间中相近的点所对应的Github账号
就可以被归类为同类账号
基于以上原理
dagster成员就可以拿之前虚构的代码仓库
用那些点了star的Github账号
来做聚类分析，标记出一个类
当完成聚类后
如果发现某个Github账号也属于这个类
那就可以怀疑这个账号也是假账号
那么，为什么假账号能够聚类呢？
这是因为这些账号虽然在模仿正常开发者
但是他们之间也有很多类似行为
比如
他们的行为可能都是同一个脚本在操作
那么在行为逻辑、行为执行的时间和数量上
就会比较类似
又或者他们都会给同一批仓库点star
举个例子，有两个Github账号
虽然他们之间并没有什么交集
仓库的编程语言不同、开发者国籍也不同
但是他们都在某几天做着同类的事
比如先浏览一些仓库
然后再发表评论
最后给某个仓库点star
那么他们就会被划分为同类
如果他们的同类中有实锤的假账号
那么他们大概率也是假账号
在这张图表中，衡量了前面说的
刷star的仓库中
点了star的那些Github账号的行为
其中横轴是日期跨度
纵轴是账号交互的仓库总数
蓝色部分是所有用户
红色部分是明确的假Github账号
黄色部分是根据聚类
被怀疑的假账号
由于我们已经知道这个仓库的所有star都是刷的
所以其实黄色部分的账号也都是假账号
这样
通过聚类的方式就可以很好的把他们识别出来了
而对于完全没有刷star的项目
点star的用户行为基本不会与假账号有交集
对于一个刷了star
同时又有实际参与者的项目
分析结果是这样的
举个例子
okcash是一款开源的加密货币
有579个star
但是
经过上述dagster的方式检测后会发现
所有为okcash点star的账号中
疑似虚假刷star的账号占比达到97%，
相信大家看了之后心里应该有点数了
dagster的聚类检测方法已经开源
我会把它的地址放到视频简介中
大家如果有兴趣
可以用它来检测一下其他的开源库
没准会有意外的惊喜
不过，根据Dagster团队的研究
幸运的是
买star的行为在GitHub上还不是那么普遍
这也体现出开源社区积极向上的整体价值观
毕竟
开源社区的长期发展还需要每个开发者的努力
好了，本期的视频就到这里
感谢大家的观看，我们下期再见
