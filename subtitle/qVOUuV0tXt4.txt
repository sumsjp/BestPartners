大家好，这里是最佳拍档，我是大飞
在硅谷充斥着对AI编程工具狂热追捧的今天
有这样一位技术先驱
他亲手缔造了改变Web开发格局的Ruby on Rails框架
却在面对GitHub Copilot时
说出"我发自内心恨透了它"这样的尖锐言论
他就是丹麦籍的传奇程序员大卫·海涅迈尔·汉松（David Heinemeier Hansson）
江湖人称DHH
这位37signals的联合创始人
在与Lex Fridman长达六小时的播客对话中
不仅展现了对编程本质的深刻理解
更是抛出了对AI时代程序员生存状态的灵魂拷问
今天
我们将沿着他的技术轨迹与商业哲学
展开一场关于代码之美、工具理性与独立精神的深度探讨
1995年
就读于丹麦高中的大卫·海涅迈尔·汉松首次接触编程
彼时他的朋友试图用Turbo Pascal
教会这个对计算机充满好奇的少年
然而第一个绊脚石出现在了"变量"这个基础的概念上
如果有一个东西，你给它赋了值
为什么还要再给它赋另一个值？
这种对数据可变性的本能困惑
让习惯了数学常量思维的他
难以接受编程的逻辑
相较于变量的"不确定性"，
常量的固定值在他眼中更加符合哲学的直觉
这种认知断层
直接导致了首次学习以失败告终
这段经历后来被他形容为"与编程的初次决裂"，
甚至让他一度认为自己"不属于这个领域"。
真正的转机出现在网页开发领域
当大卫开始用HTML搭建静态页面的时候
那种无需复杂逻辑的标记语言
让他找到了最初的成就感
随后接触的ASP技术
虽然使用的是略显笨拙的VBScript
但是已经能够实现简单的动态交互
这是他第二次叩击编程之门
但是，在遇到PHP之后
这个诞生于1994年的开源脚本语言
完美契合了大卫当时的需求
那就是为丹麦的在线游戏新闻网站
实现自动化的内容管理
PHP的魔力在于即时的反馈机制
无需编译环境
只需要通过FTP上传文件到服务器
刷新页面即可看到代码效果
这种"编写-上传-验证"的极简流程
让他首次理解了条件语句、循环结构与变量作用域的实际应用
尽管如今PHP语法常常被大家所诟病
但是在1990年代末的技术环境中
它比Java的冗长样板代码、以及Perl的晦涩语法
更加友好
大卫后来回忆说道，PHP就像一把锤子
虽然不是很精致
但是能让我亲手打造出可用的工具
这种务实的技术选择
为他建立了对Web开发的基础认知
2003年
当大卫与杰森·弗里德（Jason Fried）用PHP开发Basecamp的首个版本时
技术阵痛已经难以忽视
PHP的弱类型导致的调试成本、面向过程编程的逻辑混乱
导致团队的开发效率低下
在评估了Python等候选语言后
一篇关于Ruby的技术文章改变了一切
作者正是Ruby之父松本行弘（Yukihiro Matsumoto）
文中"为程序员幸福感优化"的设计哲学
深深震撼到了大卫
在首次阅读Ruby代码示例的时候
他体验到了前所未有的认知共鸣："5
times { ...
}"的语法，如同自然语言般流畅
彻底颠覆了他对编程语言的认知
这种将数学运算转化为人类可读语句的设计
也暗合了他作为人文主义者的思维习惯
他后来在博客中写道
Ruby让我意识到
代码可以是优雅的散文
而非机器指令的堆砌
这种美学觉醒
促使他做出了一个大胆的决定
那就是放弃已有的PHP代码库
用尚未成熟的Ruby来重写Basecamp
2004年
当大卫在Ruby社区的邮件列表中
分享了自己开发的数据库抽象库时
意外地收到了松本行弘的私人邮件
邮件写到，你似乎对这个很有热情
想不想拥有Ruby核心代码的提交权限呢？
这种跨越地理与文化的信任
让身处丹麦的大卫感受到了开源社区的精神力量
在成为了核心开发者后
他开始深度参与Ruby语言的特性设计
其中最著名的贡献
就是推动了"Block"语法的优化
这也为后来Ruby on Rails的敏捷开发模式
奠定了基础
这段经历塑造了他对技术社区的理解
那就是开源并不是代码的堆砌
而是人类协作智慧的结晶
这种理念也直接影响到了后来Rails框架的设计
强调 Convention over Configuration
也就是约定优于配置
通过减少开发者的决策来提升效率
本质上也是对松本行弘"程序员幸福感"的理念的一种延续
面对如今TypeScript等静态类型语言的兴起
大卫的反对态度异常坚决
他在播客中指出了这类语言的三大痛点
首先
静态类型构建的"安全感"是虚假的
它能捕获的多是拼写错误、参数数量不匹配等表层的问题
而真正致命的逻辑错误
比如业务规则上的漏洞
根本无法通过类型检查发现
其次，类型定义的冗余代码
严重损害了开发效率
开发人员不得不编写大量只能用来安抚编译器的代码
而对业务逻辑毫无贡献
最后，静态类型扼杀了元编程能力
像Ruby语言中的动态类定义、方法别名等特性
正是通过元编程实现的高效开发模式
而在TypeScript或Java中
类似的操作则需要复杂的代码生成工具
他以Basecamp的开发实践为例
这个运行了将近20年、代码量超过百万行的复杂应用
完全依赖动态类型与完善的测试套件
团队通过行为驱动开发BDD来编写测试用例
这些测试提供的安全保障
远比静态类型检查更可靠
这种观点挑战了行业的主流认知
也引发了关于"类型安全vs测试优先"的持续讨论
针对当下泛滥的微服务热潮
大卫提出了一个名为"宏伟的单体应用"的理论
认为这是被大厂神话所误导的技术盲从
他分析道
微服务将单体应用内的本地方法调用
转化为了需要处理网络延迟、服务发现、分布式事务的RPC调用
这种架构升级带来的复杂度
远远超过了拆分带来的收益
对于99%的公司而言
微服务不是解决方案
而是问题的制造机器
他还举例说明
在Basecamp的架构实践中
单体应用展现出了强大的生命力
整个代码库在单一的工程中管理
支持全局搜索与即时调试
部署过程只需要一次原子操作
而且团队无需维护复杂的服务网格
50人的开发团队就能支撑数百万用户的并发访问
他特别强调
微服务适合亚马逊这样需要数百个团队独立开发的企业
但是中小团队选择微服务
无异于在没有学会走路时就尝试跑步
应该说，这种务实的观点
为陷入架构焦虑的开发者们
提供了一种冷静的思考维度
2023年
当GitHub Copilot掀起AI编程助手热潮的时候
大卫进行了为期两周的刻意练习
一开始的体验充满了矛盾，一方面
AI能快速生成常见代码片段
比如HTTP请求的处理
确实提升了编码的速度；
但是很快
他发现自己陷入了所谓的"监督者陷阱"，
AI生成的代码开始频繁出现各种逻辑错误
比如错误的作用域引用、不符合业务规则的条件判断等等
导致他不得不花费大量的时间去修正
他感觉自己不再是一名创造者
而是一个机械的代码审查员
更深层的危机
在于AI带来的技能退化感
长期依赖自动补全和代码生成
让他发现自己对常用API的记忆开始模糊
肌肉记忆与思维节奏被打乱
这种感受被他类比为
钢琴家放弃弹奏练习
转而依赖自动演奏软件
他开始感觉核心的编程能力正在从指尖流失
于是大卫特别指出
编程的乐趣恰恰在于凿刻代码的过程
当手指在键盘上敲出自己构思的逻辑时
大脑会形成独特的神经反馈
这种反馈是创造力的重要来源
尽管对Copilot充满批判
大卫并不否认AI在教育领域的价值
当接触某个陌生的技术时
他会通过ChatGPT来获取基础的用法示例
他说到
这就像是拥有一个24小时在线的导师
能快速提供可运行的代码模板
但是他也会严格区分使用的场景
学习的时候
AI是一个高效的工具
而创造的时候，必须保持人类的主导
当大卫在构思核心算法或者设计数据模型的时候
一定会关闭所有的AI工具
因为这个时候需要的是深度思考
而非被机器的建议所干扰
这种观点也引发了关于"AI时代程序员角色"的深层讨论
当编码的机械性工作逐渐被AI取代
人类程序员的核心竞争力究竟应该在哪里呢？
大卫的答案是
"问题定义能力"与"架构审美"，
因为这些领域需要深厚的知识与创造力的工作
目前来说，都是AI难以替代的
在商业方面，自从创立37signals开始
大卫与杰森·弗里德就确立了"反风险投资"的商业策略
他们拒绝了所有VC的邀约
坚持通过产品收入来实现自然增长
大卫分析道，风险投资不是资金注入
而是价值观绑架
VC们所追求的"独角兽"模式
要求企业不计成本的进行扩张
最终导致创始人失去控制权
产品沦为资本的增值工具
于是
他们提出了所谓"拉面盈利"的概念
即收入要覆盖基本的运营成本
这个理念看似保守却蕴含着智慧
Basecamp在2004年上线首月即实现了盈利
此后20年从未亏损
这种财务独立也让团队能够拒绝短期的利益诱惑
比如拒绝为了扩大用户基数而引入广告模式
坚持纯粹的订阅制
正如大卫在访谈中说的
我们宁愿拥有100%的小而美公司
也不想要5%的估值泡沫
2020年，大卫他们开发的HEY邮件应用
与苹果发生了冲突
如今却成为大卫商业理念的经典注脚
当苹果以"未提供应用内购买"为由
拒绝HEY应用的更新时
他敏锐意识到了这是平台垄断的典型表现
苹果试图对所有通过他们平台获取的用户收入来征税
即使用户注册实际上是发生在HEY的官网
这种对开发者权益的侵害
触碰到他的原则底线
于是，他采取了极具戏剧性的反抗
在Twitter上公开了苹果的拒绝信
详细解释了事件的经过
并将它上升到了"平台资本主义 vs 独立开发者"的公共议题
这场持续两周的舆论战
最终以苹果的妥协而告终
HEY应用获得了豁免
无需接入内购系统
这次胜利被视为开发者对抗平台垄断的一个里程碑事件
也让大卫成为硅谷少数敢于直面科技巨头的创业者
2018年
当WordPress的母公司Automattic
提出用股权交换Stimulus框架的使用权时
大卫的拒绝同样坚决
他认为
开源的本质是一种"礼物经济"，
他愿意分享Stimulus
是因为它解决了自己的问题
从未期待任何的回报
而对方的提议被他视为了一种对开源精神的玷污
如果将技术贡献与商业利益挂钩
就会破坏开源社区的信任基础
应该说
这种坚持源自他对开源的深刻理解
正如Ruby与Rails的成功
就是依赖于全球开发者的无偿贡献
他在访谈中说道
如果每个开源作者都要求回报
那么技术共同体就将不复存在
这种理想主义
在如今商业至上的硅谷看来
无疑显得尤为珍贵
在谈到对开发者的建议时
大卫反复强调"内生动力"的重要性
他最初开发Rails框架
只是为了简化Basecamp的开发流程
后来设计HEY邮件应用
也是源于对传统邮箱广告泛滥的不满
所以他认为，最好的技术创新
往往始于开发者自己的痛点
他建议新手从构建一个个人项目开始
比如为自己设计一个博客系统
在解决真实需求的过程中去学习
而非盲目的跟随教程
在谈到行业流行的"最佳实践"时
他提醒道
这些实践往往是大厂特定场景的产物
并不一定适用于所有的情况
以微服务为例，Netflix的架构选择
是与它的分布式团队的规模相关的
而小团队盲目复制，只会适得其反
他鼓励开发者形成自己的技术审美
就像鉴赏文学作品一样
好的代码应该兼具可读性与优雅性
这种品味需要通过阅读优秀的代码库来逐步的培养
另外，作为远程办公的早期践行者
比如37signals在2006年就推行了全员远程办公
大卫强调
工作不应该占据生活的全部
正如他在访谈中说的
编程是伟大的事业
但不是人生的全部
他本人也一直保持着阅读哲学书籍、参与社区活动的习惯
认为这些非技术方面的积累
能够为编程带来跨领域的灵感
他很欣赏可可·香奈儿说过的一句话话
那就是生活中最好的东西都是免费的
比如家庭、友情、兴趣
这些才是幸福的基石
纵观整个访谈
可以说大卫·海涅迈尔·汉松的技术生涯
也是一部拒绝随波逐流的个人史诗
从反叛静态类型到批判微服务的泡沫
从抵制AI编程工具到对抗平台的垄断
他始终以清醒的头脑在审视技术发展的本质
在AI即将重塑编程范式的今天
他的观点或许显得过于保守
但是却也为我们提供了重要的反思维度
那就是当工具变得越来越智能的时候
人类程序员的核心价值究竟在哪里呢？
当商业利益开始裹挟技术创新的时候
又该如何保持对技术本质的纯粹追求呢？
或许，正如他在访谈中所说的
编程的终极乐趣，在于用自己的双手
创造出能被他人使用的工具
这种创造过程中的思考、试错与突破
是任何AI都无法替代的人类特质
也许，在这个技术狂飙的时代
我们更需要像大卫这样的"代码工匠"，
用对技术的敬畏与对本质的坚守
为行业照亮前行的道路
感谢大家收看本期视频
我们下期再见
