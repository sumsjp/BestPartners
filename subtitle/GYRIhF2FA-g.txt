大家好这里是最佳拍档我是小郭
Podman 是由红帽公司于2018年发布的一款容器管理工具
它也是 2019 年发布的 CentOS 8上的默认容器管理工具
2021年8月31日 Docker 公司宣布
将产品订阅划分为：个人、团队、专业和企业四个版本
除了个人版本可以免费使用外其他均需付费
而个人订阅的使用范围是个人、学生
开源软件工作者、教育工作者或者小公司
这个小公司是指公司人数少于250人且年收入少于1,000万美元
Docker 开始收费，广大网友就开始寻找他的替代品
今天要给大家介绍的就是这样一个产品: Podman
咱们就从日常使用场景上来看
包括: 打包 拉取镜像 容器管理 compose
来分别看一下能不能用它来代替 Docker
在Mac上安装 Podman 非常简单
如果你安装了 Homebrew 的话
可以直接用 brew install podman 来安装
安装完以后就可以直接使用了
如果没有也没关系
官网提供了安装程序可以直接下载安装
这里需要注意一下
需要下载 potman-installer-macos 这个安装文件
不要下载下面的 Podman remote
Podman remote里的文件只相当于一个客户端程序
无法直接使用
下载好以后直接打开安装
它默认会安装到 /opt/podman 这个目录下面
但这时如果在终端输入 podman -v 时
会提示没有这个命令
这是因为系统默认并没有将
bin 这个目录添加到 PATH 环境变量当中
只需要将它加入到 PATH 就可以了
可以把这个 export 的语句放到 bashrc 或 zshrc 中
这样就不用每次打开终端都执行 export 命令了
首先看一下
podman 命令和 docker 命令的帮助信息
这么看可能不太直观
因为 Docker 把管理命令和普通命令分开了
咱们来整理一下
可以看到他们支持的命令基本是相同的
根据官方的介绍
你可以直接用 alias 来为 podman 设置一个 docker 的别名
这样就能和以前一样用 “docker” 命令来控制 Podman 了
如果你不想用别名
也可以直接用原生的 docker-cli
但需要设置一下它的 context
可以看到这里有两个context
这个名为 default 的就是Podma的链接
用命令 docker context use default
就可以用原生的 docker 来控制 Podman 了
如果想切回 docker 可以用 desktop-linux这个context
为了方便大家区分
接下来我所有操作 Podman 的命令都将用 podman
而操作 Docker 的命令都会用 docker
下面咱们来运行一下 ps 命令
可以看到 Podman 并没有把当前正在运行的容器显示出来
而是提示了连接失败
这是因为咱们是在Mac上运行的
而Podman在Mac上运行需要Linux内核的虚拟机
但咱们还没有创建这个虚拟机
先不管他再来看看 Darker 的 ps
可以看到 Docker 会提示 Socket 连接失败
是不是 Docker daemon 没有运行
可能有的朋友要问了
为什么 Podman 没有提示 daemon 没有运行
而提示虚拟机的问题呢
原因有两个
第一 Podman的设计原因
Podman 没有 Daemon 进程
而是直接通过OCI运行（容器）
也就是 crun 来启动容器
容器进程作为 Podman 的子进程
这样就能够以非 root 用户来运行容器
第二 Docker 隐藏了虚拟机的存在
容器的运行需要Linux的内核支持
要想在Mac系统上运行容器
只能通过Linux内核的虚拟机
在安装Docker Desktop的时候
Docker自动创建了虚拟机
但 Podman 并没有这样做
而是提供了一个 machine 的命令来管理虚拟机
Mac 系统中 Podman 命令的真实身份
就是刚才咱们看到的 Podman remote
它更像是一个客户端程序
与虚拟机中的 podman Socket 的进行交互
所有的命令都将由虚拟机中的 podman 命令在虚拟机中运行
有的朋友可能就要问了
那我怎么操作主机上的文件呢
还有端口映射咋处理呢
别着急咱们来一个个的说
先来看一下 machine 命令都有哪些操作
info 用来显示系统的信息
这里显示的是一个汇总的信息
而不是某个虚拟机的信息
init 用来初始化虚拟机
inspect 查看虚拟机的信息
这个是具体虚拟机的详细信息
list 查看虚拟机的列表
os 使用新的虚拟机镜像
根据官网的介绍
它可以将OCI容器瑞 base 到当前虚拟机
但是我并没有找到合适的镜像
就连官网给的例子都运行失败了
rm 删除指定的虚拟机
拉取的镜像以及运行的容器都在虚拟机里
如果将虚拟机删除了
那么已经下载的镜像和正在运行中的容器都将被删除
set 修改虚拟机的配置
ssh 连接到已有的虚拟机
start 和 stop 就不用说了
由于前面提示没有虚拟机
咱们现在先来创建一个
在创建前先看看 init 命令的参数
--cpus 指定虚拟机使用的CPU个数 默认为1
--disk-size 磁盘空间的大小
单位GB 默认是100
这个空间不会一下就占满
--memory 内存的大小 单位是MB 默认是 2048MB
--now 创建成功后就直接启动虚拟机
重点看一下这个 volume 参数
和运行容器时的 volume 参数类似
可以通过这个参数把主机上的文件挂载到虚拟机中
默认把主机上的 /users
/private 和 /var/folders 三个目录共享给虚拟机
并挂载到虚拟机相应的位置
这就解决了文件共享的问题
--rootful 是否使用 rootful 模式
就是用 root 用户来运行容器
不指定这个参数的时候
默认是用 username 参数指定的用户来运行 Podman 中的容器
--timezone 时区 默认为主机的时区
--username 虚拟机中的用户名 默认为 core
仅在 rootless 模式下有效
--ignition-path 指定 Ignition 配置文件的位置
Ignition 是 CoreOS 中的一个工具
用于在系统第一次启动时
根据配置文件对系统进行磁盘分区、格式化、写入文件
配置用户等等
如果不指定这个参数
Podman 会自动生成到这个文件下
如果你指定了的话
就会根据你指定的配置文件去配置虚拟机
但是它就不会自动的为你再添加密钥对
以及创建系统连接了
--image-path 虚拟机镜像文件 可以是具体的文件URL
还可以是 testing next 或者 stable 中的一个
默认是testing
好多参数都有默认值
所以可以直接用 podman machine init 来创建
一核2G内存100G硬盘的虚拟机
它会自动把Mac系统中的user private和var/folders
三个目录挂载到虚拟机相应的位置
如果你第一次运行这个命令的话
它会从网上去下载虚拟机的镜像
耐心等待就好了
它已经创建完成了
提示我们用 start 命令来启动
咱们先不启动它
再来运行一下 ps 命令看一下
可以看到提示变成了连接 TCP 端口 50782 失败
这是因为咱们还没有启动虚拟机
在虚拟机没有启动的情况下
就会提示这个错误
下面咱们来启动这个虚拟机
可以看到它在挂载目录
然后提示说这个虚拟机是以 rootless 模式运行的
以及如何切换到 rootful 模式
在使用 rootless 模式运行容器时
Podman 会把运行容器的用户映射到容器内部的 root 用户
一会我会演示给大家看
下面是 Docker API 的 socket
咱们在 Docker context list中看到的 default 连接
就会连到这个 socket
刚才咱们在没有启动虚拟机运行PS命令时
它会提示连接TCP端口 50782 失败
现在咱们来看一下
是哪个程序在监听这个端口
可以看到是一个叫 gvproxy 的程序
Podman 就是用这个程序来进行虚拟机内端口的转发的
Mac 中的 podman命令也是通过它和虚拟机中的 Podman 交互
关于这个项目的具体信息
大家可以看它的GitHub主页
你可以根据需要创建多个虚拟机
以适应不同用途和环境
但需要注意的是
同时只能有一个虚拟机在运行
另外 machine 相关的命令都可以在
选项后面增加一个虚拟机名称来控制指定的虚拟机
如果不指定
就会控制（名为） podman-machine-default 这个虚拟机
虚拟机已经创建并且启动好了
下面咱们按照之前说的使用场景
一个个的来试验
先来看打包
Docker 的打包文件叫 Dockerfile
Podman 也支持这个文件名
但他也有自己的打包文件叫 Containerfile
Containerfile 和 Dockerfile 的语法是一致的
Podman 打包出来的镜像遵循OCI标准
Docker 打包的镜像也遵循OCI的标准
这就使得这些镜像可以在
兼容OCI的容器生态中部署和运行
现在咱们来打包一个简单的镜像
这个镜像将 info.txt 复制到镜像中
然后输出这个文件的内容并运行top命令
下面咱们开始打包
Podman 在拉取镜像的时候没有进度条
这个有点不方便
只能耐心等待了
打包成功了咱们来看一下
可以看到Podman 为我们的镜像
加了 localhost 的前缀
实际在运行时如果没有重复的话
是不需要指定前缀的
现在咱们把这个镜像导出来
然后导入到Docker里看能不能运行
先启动 Docker Decktop
导入 Docker 后 localhost 的前缀还存在
在（用）Docker 运行时就要使用全名
而不能像 Podman 一样使用短名
接下来再来看一下拉取镜像
咱们拉一个Redis的镜像过来
如果不指定前缀 Podman 默认是从 dockerhub 去拉取镜像
但他也支持从其他的仓库拉取
比如 quay.io 上
咱们先去搜索一个镜像
这个容器被上传到了4个仓库
Podman 都可以拉取
拉取不同仓库的同一镜像时
只是增加了一个tag
镜像的ID是一样的
下面咱们来运行一个 Redis 容器
顺便看看容器管理相关的命令
在启动命令中用 -p 参数映射了容器的 6379 端口
现在咱们来看看这个端口的监听情况
就是前面说的 gvproxy 这个程序对端口进行了代理
需要注意的是和 Docker 一样
在 Mac 上 Podman 是不支持将 network 模式设置成host的
这样操作不会报错
但从Mac上无法访问到相应的端口
host 模式只能在虚拟机内部进行监听
这个大家了解一下就可以了
就不再演示了
下面咱们来用客户端连一下看看
随便写出一个 key 然后保存 rdb 文件
现在咱们到容器内部去看看
咱们再来用 root 用户创建一个文件
可以看到容器内部 rdb.dumb
这个文件拥有者是 redis 这个用户
而刚才创建的 now.txt 则归属于 root 用户
那么在容器外部是什么情况呢
咱们再来看一下
刚才启动时
我把 Redis 这个卷映射到了容器内 /data 这个目录
现在咱们来看一下这个卷里的文件
可以看到这个卷文件的位置是这里
如果咱们直接 ls 查看的话
会发现这个文件并不存在
这是因为卷是在虚拟机内部的
咱们再去虚拟机里看一下
和刚才在容器内部看到的一样
里面一共有两个文件
不同的是他们的owner
在容器内部 now.txt 的 owner 是 root
而现在在容器外部
他的 owner 却变成了core
也就是运行容器的用户
而 rdb.dump 文件的 owner
则变成了100998
刚才映射的是卷
咱们再来看看映射主机目录的场景
按照 Docker 的方式只需要这样就可以了
但是会发现容器运行失败了
提示操作不允许
只是因为无法修改挂载到虚拟机中目录的 owner
这时咱们需要使用
--userns keep-id 这个参数
现在咱们来加上它再运行一下试试看
文件已经正常写到了 redis-data 目录下了
这是咱们再来看看容器内的用户
可以看到现在的用户变成了 core
而不是之前的 root 了
如果你觉得每次都使用 userns 参数比较麻烦
想像 Docker 一样直接映射文件的话
也可以设置一下 PODMAN_USERNS 这个环境变量
这样它就可以自动设置(--userns参数)了
可以看到容器启动成功了
把这个export命令放到 bashrc 或者 zshrc 文件当中
就可以愉快的使用了
至于文件的复制
由于虚拟机中的磁盘位置和主机上是一致的
因此复制文件并没有什么问题
比如复制容器中的文件到主机上
再来说一下 Docker compose
现在安装 Docker Desktop 时
默认会把 Docker compos 安装上了
不用再单独安装
但 Podman 的 compose 程序还需要使用 pip 来单独安装
podman-compose 会调用 podman 的命令来管理容器
有一点需要注意的是
如果你的 docker-compose.yml 文件中使用了卷映射
则需要先创建这个卷
否则 podman-compose 在启动时会报错
这应该是 Podman-compose 的一个 bug
可以看到他实际在尝试当卷不存在的时候创建了
但执行检测的时候出错了
咱们先来创建这个 volume
可以看到 podman-compose 帮我们创建了三个容器
咱们来访问一下看看
输入默认的用户名和密码登录
然后咱们来添加一个数据源
URL 这里填 http://容器名称:9090 就可以了
容器间可以通过名称访问
然后再来导入个 dashboard
这里选择普罗米修斯的数据源
再点导入就可以了
可以看到数据了
Podman 还提供了一种类似的管理机制叫Pod
Podman 全称是 Pod manager
Pod 的概念实际是 Kubernetes 提出来的
Podman 的 Pod 和 Kubernetes 的类似
它可以将多个容器放到一个 Pod 当中
统一进行管理
而在同一个 Pod 内部的容器
就好像运行在同一台主机上一样
他们之间可以通过 localhost 的来互相访问
如果需要端口映射的话
也是在 Pod 上进行
有一点需要注意的是
Pod 创建好以后就不能再修改端口映射了
需要在创建时先规划好
比如咱们刚才的 Grafana
只需要将 3000 端口映射出来就可以了
现在咱们来看一下容器列表
可以看到有一个名为 Infra 的容器
这个容器是 Podman 的默认容器
它负责保持 Podman 的命名空间
并允许 Podman 通过它来控制 Pod 中的其他容器
Pod 中大部分的属性也是设置到这个容器当中的
比如端口的绑定
vgroup-parent 的值以及命名空间等
Pod 创建以后这些内容就无法再更改了
比如你想往 pod 中添加一个新的端口映射
只能重新创建 pod
然后咱们再把3个容器加入到这个 pod 当中
注意这时不需要再使用 -p 进行端口映射了
因为咱们已经在创建 pod 的时候映射好了
我这里提前准备了运行命令
可以看一下
好了容器已经添加完了
咱们来访问一下看看
现在咱们重新添加一下数据源URL
这里用 localhost 就可以了
Podman允许在运行容器时创建Pod
只需要在 --pod 指定容器名称时
在名称前面增加一个 new:
这样就可以在运行容器时直接创建Pod
并把运行的容器添加到 Pod 当中了
有的朋友可能又会问了
这么一个个的往 Pod 里添加实在是不方便
能不能像 Docker Compose 那样
通过配置文件来配置容器呢
当然是可以的
podman-compose 提供了这个功能
它可以让容器运行在 Pod 当中
只需要在启动的时候加上 --in-pod=1 就可以了
但有一个小问题是
这么启动的容器无法通过 localhost 访问
只能通过容器名称来访问
在 GitHub 上看有人提这个问题
不知道作者是否准备修改
现在咱们再来看看如何管理Pod
Podman 支持对 Pod 中的容器统一启动或停止
如果想单独控制 Pod 中的某个容器的话
可以像操作普通容器一样直接对容器进行操作
如果将容器删除
那么该容器也会从Pod中被删除
要想再添加回来
只需要重新 run 并指定 Pod 名称即可
最后再来简单说一下 Kubernetes
Podman 提供了一个 kube 命令
用来和 Kubernetes 交互
apply 可以将 podman 的容器或 Pod 部署到 Kubernetes 中
也支持 Kubernetes 的配置文件
generate可以根据容器或 Pod
创建相应的 Kubernetes 的配置文件
play 可以将 Kubernetes 的配置文件部署到 Pod 当中
而 down 的作用相当于
podman pod stop && podman pod rm 两个命令的集合
除了能生成 Kubernetes 配置文件
以及将容器或 Pod 部署到
Kubernetes 的集群当中以外
由于 Kubernetes 对 CRI 的支持
使得 Podman 也可以代替 Docker 作为底层的容器运行环境
Kubernetes默认的容器运行环境是CRI-O
它实现了CRI的规范
而 Docker 和 Podman 也都实现了 CRI 的规范
所以才可以用 Podman 作为底层的容器运行时
整个调用链从上到下应该是 Kubernetes CRI OCI
最后是Linux内核
containerd 和 runc
都是 Docker 公司捐献出来的
CRI-O 是红帽主导开发的
被用到了 OpenShift 当中
至于为什么Podman 用了containerd
而不是自家的 CRI-O 就不得而知了
难道这个 -O 指的是 for OpenShift
runc 和 crun 的区别在于 cgroup 的版本
runc 只支持 cgroup V1
而 crun 支持 cgroup V2
Podman 用的是 containerd/crun/cgroupV2
可以通过 podman info （命令）来查看
最后再来说说图形界面
和 Docker Desktop 类似
Podman Desktop 也提供了 podman 的图形界面
利用 Podman Desktop 可以完成大部分的常用操作
下面就来简单介绍一下
安装同样是两种方式
如果你安装了 Homebrew
直接用 brew install podman-desktop 命令来安装
如果你没有安装 Homebrew 的话
可以直接去官网下载安装包
安装之后打开程序
这个程序启动很慢要等一段时间
一个比较有意思的事是
Podman Desktop 安装时并没有自动安装 Podman
如果你没有自己安装的话
它会在这里提示你
需要先下载安装 Podman
如果你已经创建了虚拟机
那么他默认会读取虚拟机的状态
而如果你没有创建的话
他也会在这里提示你需要创建虚拟机才能使用
除了 Podman 他还通过插件支持了Lima Kind 等
如果你运行了 Lima 的虚拟机的话
这里也会显示出来
下面这个是容器管理
可以看到当前所有的容器
并且对容器进行相应的启停操作
上面的三个按钮
第一个是删除所有已停止的容器
中间的是添加容器
点击以后它会询问你是用 Dockerfile 打包镜像
还是使用已有的镜像
最后的按钮是运行 Kubernetes 配置文件
支持用 Podman 运行
以及用 Kubernetes 集群部署
前者就相当于 podman kube play
而后者就相当于 aplay
当你在列表中选择多个容器时
上面还会额外多显示两个按钮
第一个是删除选中的容器
第二个是将选中的容器放入到一个新的 Pod
列表右侧是启停按钮
中间是删除
这个删除没有确认并且运行中的容器也可以直接删除
所以要小心勿操作
最后的按钮点开有多个操作可以选
查看日志
打开浏览器打开终端
还有重启容器
根据容器类型的不同
可能还会有生成 Kubernetes 的配置文件
部署到 Kubernetes 的集群等操作
点击容器记录可以查看容器的日志信息
以及一个终端
这个终端功能太方便了
接下来一项是Pod管理
吐槽一下这里竟然没有创建空Pod的功能
只给了提示让去终端里创建
默认提示的命令还给了个 label 参数而不是 name
这上面也有一个按钮
可以运行 Kubernetes 的配置文件
和刚才在容器那个界面看到的是一样的
如果你有 Pod 的话它会在这里显示
和容器管理类似右侧也是那三个按钮
功能也都差不多这里就不多说了
点击 Pod 的记录
也可以查看 Pod 的详情以及日志信息
接下来一项是镜像管理
注意这里的搜索镜像并不是联网搜索
而是搜索本地的镜像
上面的三个按钮
第一个是删除所有未使用的镜像
第二个是从网络上拉去一个新镜像
最后一个是根据打包文件构建一个镜像
后面还是那三个按钮
第一个是运行该镜像的容器
中间是删除镜像
后面是显示镜像历史
如果你设置了集群的话
这里还会显示部署到 Kubernetes 集群的按钮
点击运行容器按钮
它会显示一个配置表单
将run的常用参数以表单的形式填写
对于不熟悉命令参数的人来说比较方便
最后一项就是卷管理
同样没有以图形界面创建卷的功能
不过这个功能用处倒不是很大
因为 Podman 会自动创建
右侧的是删除按钮
点击卷也可以查看卷的详细信息
最后再来看一下它的设置
最主要的就是它的第一项 Resource 设置
这里可以配置并管理虚拟机或其他环境
至于其他的保持默认就好
最后再来说一下系统托盘按钮
这里可以快速启停虚拟机
如果有多个虚拟机的话
它会它都会显示在这里
每个虚拟机一个菜单项
打开是star的和stop两个操作
Podman Desktop 整体使用下来还算可以
给我印象比较深刻的功能是运行容器
还有日志和终端功能
但也还有一些改进的空间
比如进入部分界面时无法取消
还有刚才说的无法在图形界面创建 Pod 和 Volume 等
另外就是偶尔还有一些小bug
不如 Podman 命令稳定
还有要吐槽一下的就是
它的启动速度实在是有点慢
即使在虚拟机已经启动的情况下
启动也还是很慢
但毕竟它在1.0.1版本
还有很大的提升空间
最后总结一下
1、Podman 和 Docker 的命令基本兼容
Podman 提供了 Docker 的 socket 连接
可以用 docker-cli 控制 Podman
第二、Podman 可以拉取运行 Docker Hub 中的镜像
也可以根据 Dockerfile 构建并上传到 Docker Hub
第三、Podman Desktop 提供了图形界面
用户可以用它方便的管理容器
但还有一些小问题和需要优化的点
第四、Podman Compose 和 Docker Compose V1 基本兼容
还支持在 Pod 中运行
第五、Podman 需要自己管理虚拟机
支持 rootless 模式
无 Daemon 相对来说更安全一些
第六、从 Podman 身上可以看到 Docker 早期的影子
假以时日
相信它可以在容器生态中占有一席之位
好了，以上就是今天要分享的所有内容了
时间仓促
其中有说的不对的地方欢迎指正
感谢大家的观看下次见
