大家好，这里是最佳拍档，我是大飞
大家或许还记得
前段时间Claude推出了一个Artifacts功能
这个新功能扩展了用户与Claude的互动方式
当用户让Claude AI生成像代码、文档或者网站设计等内容的时候
这些Artifacts，也叫生成物
会显示在对话窗口旁边的专用窗口中
通过这种方式
Claude AI相当于创建了一个动态的工作空间
在这个空间中
用户可以实时查看、编辑和构建Claude的创作内容
用过Artifacts的朋友们应该可以感觉到
它能够比较明显地提升大语言模型输出结果的表现力
而且输出的方式也不像以前一样
局限于文字或者图片
现在还可以包括代码、网页等等
这个功能在当时一经发布
就受到了很多用户的喜爱
算是为Claude狠狠圈了一波粉
既然如此，那作为竞争对手的Open AI
自然也不可能干看着
这个功能A社能做，难道我就做不了吗？
于是就在Claude上线Artifacts功能的三个月后
OpenAI官宣了类似的功能
Canvas
OpenAI官方声称
这是一种使用 Chat GPT 进行写作和编程的新方式
效率将大大提高
虽然Canvas目前还处于测试阶段
但是在官宣之后
所有Chat GPT Plus的用户就都能够开始体验Canvas
企业和教育用户也将很快访问权限
那可能有观众要问了
这么多功能一个个的推出
免费用户还能体验完整的服务么？
这个大家不用担心
Open AI在官宣中已经明确的表示
Canvas的正式版将向所有Chat GPT的免费用户开放
也就是说大家不需要为这个功能额外再付一笔费用
有人说这是Open AI终于听到了用户的呼声
也有人说这是打不过Claude 就加入
不管怎么说吧
这次Canvas功能的发布对用户来说总归是件好事
一些抢鲜体验的用户
已经开始在社交平台上分享他们的使用体验了
今天大飞也带大家来看看OpenAI的这个新功能到底如何吧
根据OpenAI公开的资料
Canvas将会是一个全新的工作界面
用户使用的时候
会在一个新的独立窗口中打开
通过这个功能
用户和ChatGPT可以在同一个项目中进行协作
不再局限于单纯的问答对话
通过Canvas
ChatGPT能够更好地理解你要完成的任务背景
用户可以高亮特定的内容
明确指示ChatGPT需要关注的重点
而ChatGPT就像是一个文字编辑或者代码审查员
可以基于整个项目提供行内的反馈和建议
在Canvas中
用户对项目拥有完全的控制权
你可以直接编辑文本或者代码
还能通过快捷菜单
要求ChatGPT调整文本的长度、调试代码
或者快速执行其他实用的操作
此外
你还可以通过Canvas中的返回按钮
轻松恢复工作中的先前版本
更加方便的是
当ChatGPT检测到合适的场景时
Canvas会自动打开
当然
用户也可以在提示中加入“使用Canvas”，
手动来调用这个功能
在写作方面，通过ChatGPT的能力
Canvas不仅可以给用户提供专业的建议和反馈
还可以随意调整文档的长度和详略
增加或者删除文章的内容
甚至是对重点内容进行具体介绍
用户也不用担心看不懂文章内容
Canvas可以调整阅读的难度
甚至把专业资料的门槛降低到小学生也能看懂
当然，如果你不光是想要它帮你写作
它也可以负责完稿之后的校对和修饰
甚至如果你想的话
也能帮你添加一些简单的表情符号
只不过那样的话
虽然情感表达更加明显
但是文章的严肃性却下降了一部分了
当然了
这些都是根据写作者本人的意愿来的
从某种意义上来说
也算是一种新时代的创作
除了这些写作上的帮助以外
在编程方面
Canvas能够提供的帮助一样不小
我们都知道
编程这个事从写下第一行代码开始
就一直是一个反复迭代的过程
程序员们往往需要一次次地编写代码
然后检验可行性
只有通过运行才算是暂时完成
而且日后一定还会有后续的优化和修改
而在这种反复迭代的模式里
原本那种与AI对话的模式显然是不太适用的
因为用户很难追踪和理解代码每次的改动
也就更难看出其中的问题
更别说继续优化了
而这次Canvas通过独立出一个更为直观的界面
简化了原本需要反复提问的这个过程
使得跟踪和理解ChatGPT对代码的修改
变得更加直观
同时
OpenAI还计划在Canvas中进一步提高这种修改的透明度
帮助用户更清楚地了解每一次的改动
目前而言
Canvas中已经提供的编程快捷功能
包括代码审查、添加日志和注释、修复错误和语言转译等等
通过连接到ChatGPT
Canvas可以提供很多专业的编程建议
帮助用户改进代码的质量
也可以插入print语句和代码注释
帮助用户调试和理解代码的运行逻辑
同时也方便代码的维护
在用户写完代码之后
Canvas还可以对代码进行检测
重写问题代码并解决潜在的错误
最后
Canvas还可以将用户的代码翻译为JavaScript、TypeScript、Python、Java、C++或者PHP等多种编程语言
在编程和写作之外
Canvas在其他领域也有一些让人惊喜的应用
严肃一点的，比如做研究
生活一点的，比如说代写邮件
甚至帮你去发明新食谱
都可以轻松做到
举个例子
假设你需要完成一项艺术史的研究报告
现在不用去过多的调查什么资料
在canvas中就可以完成研究
首先，你先将需求告诉ChatGPT
它会开始搜索一切有关的报道
很快
Canvas就会在屏幕右侧开启一个全新的界面
一篇研究报告马上就可以完成
如果你对其中生成的某一句话
不太确定这句话是否正确
那么只需要选中想要提问的句子
立即唤醒ChatGPT
然后开始针对选中的句子进行提问
当然
如果你想要修改一下文章中的小标题
也都可以给ChatGPT提出你的建议
或者向它询问一些建议
而且文章写完之后也不用再担心
需要自己去搜集整理参考文献
在Canvas里
ChatGPT都可以替你一手包办
至于发明新的食谱
更是在Canvas模式下的一个创新
如果你想做一个不一样的苹果派
可以先让ChatGPT搜索并总结出
最通用的苹果派的食谱
但是你发现手头缺少了其中一种材料
比如说肉豆蔻（Nutmeg）
那就可以让ChatGPT来帮你寻找一些替换的材料
或许就可以创造出独属于你一个人的新式苹果派
为了让GPT-4o能够成为真正的创意协作伙伴
也为了让模型更加适应canvas模式
在超过20次的内部自动化评估中
Open AI的研究团队通过合成数据生成技术
对模型进行了专门的后期训练
比如从Open AI o1-preview中提取输出
然后通过合成数据生成训练素材
从而让模型无需依赖人工的数据
更快地提高写作质量和用户交互体验
如今来看
人工生成的数据速度太慢、效率太低
已经一定程度上限制了模型的训练效率
因此这次Open AI大胆地相信了合成数据
通过将合成数据作为原始训练数据
不仅提高了模型的训练效率
也让模型可以更快速地迭代版本
对OpenAI的研发团队来说
一个关键的挑战是何时触发Canvas
模型既需要能够灵敏的识别到
有检查、修改需求的任务
比如“帮我写一篇关于咖啡豆历史的博客文章”，
同时也要避免过度触发
比如“帮我准备一份新的晚餐食谱”，
这种一般ChatGPT就能完成的任务
就不太需要启动Canvas了
因此，在写作任务中
研究团队以牺牲“正确但不触发”为代价
优先改进了“正确触发”的情况
目前在写作和编码任务上
正确触发的准确率已经达到了83%和94%，
相较于零样本提示的 GPT-4o
有了显著提升
值得注意的是
这种AI的触发基线对特定的提示词非常敏感
不同的提示词不仅会导致基线的表现不佳
同时也会呈现不同的错误分布
例如
在写作和编码任务中会出现“均匀不准确”的情况
导致不同类型的错误分布和表现不佳
在编码方面
OpenAI有意让模型在触发方面偏向保守
从而避免过度干扰高级用户的体验
除了触发时机以外
研发团队还面临的另一个关键挑战
是如何让模型意识到“时机”这个概念
具体来说，就是需要让模型知道
什么时候需要执行局部编辑、什么时候需要进行全篇重写
通过训练
模型会在用户明确选择特定文本的时候
优先进行局部的编辑
否则就会倾向于全篇重写
不过随着模型的不断完善
Canvas 的编辑行为也在持续演变
相比起基础版的GPT-4o
使用Canvas的GPT-4o模型
整体性能提高了18%。
除了上面说的几个问题
研究团队还面临一项最严峻的挑战
那就是如何生成高质量的评论
尤其是如何让模型自动比较评论的质量
这个场景对训练的要求也尤其严格
与前面的情况不同
评论质量很难通过自动化评估来实现
因此只能通过人工来评估评论的质量和准确性
或许因为整体上确实有难度
也或许是因为技术上的保密要求
Open AI并没有对此进行特别明确的说明
只是用一句话来带过
经过测试结果显示
Canvas集成的模型在准确性上比基础的GPT-4o高出30%，
评论质量提升了16%。
总而言之
尽管目前Canvas还处于初级阶段
但是通过结合类似于 Notion 的文本生成与协作能力
以及 GitHub Copilot 的代码生成与建议功能
OpenAI试图在写作和编程两方面同时满足更多的用户需求
不过，从目前的实际体验来看
Canvas还并不像宣传中的那样 "炸裂"。
比方说，有用户在测试中输入提示
"编写一个 Python 脚本来处理数据分析" 的时候
Canvas 并没有能自动触发
而是停留在原始的聊天界面
不得不让用户手动输入明确的指令来启动Canvas
而在另一次测试中
输入提示 "生成一个 Java 程序来实现简单的 HTTP 请求" 时
Canvas 则成功启动
这表明Canvas在某些情况下
无法正确识别较为复杂的任务需求
导致用户使用体验不一致
现在看来
想要成为一名完美的AI助手
Canvas还有很长的路要走
好了
今天关于OpenAI Canvas的分享就到这里
大家对它有怎样的期待呢？
欢迎在评论区留言，感谢大家的观看
我们下期再见
