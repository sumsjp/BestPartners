大家好，这里是最佳拍档，我是大飞
最近计算机科学领域有一个重大突破
那就是大家在大学本科时学的经典算法
Dijkstra算法被证明是普遍最优的
这意味着不论是多复杂的图结构
即便在最坏情况下都能达到理论上的最优性能
而且这还是学术界首次将这个概念
应用到任何序列算法上
简单来说，就是现在的Dijkstra算法
已经被证明是解决单源最短路径问题的“近乎理想”的方法
那这到底是如何做到的
今天我们就来聊聊这个事
说起Dijkstra算法
它在计算机科学领域的地位那可是相当的重要
就像我们在学习数学的时候
有一些基本的公式和定理是必须要掌握的
Dijkstra算法对于计算机专业的学生来说
就是这样一个基础而且关键的知识
也是每个计算机本科生必学的内容
为什么这么说呢？
因为它解决的是一个非常实际而且重要的问题
最短路径问题
想象一下
我们生活在一个充满各种路径和连接的世界里
比如说，我们每天使用的地图应用
像谷歌地图、苹果地图等等
当我们输入起点和终点
想要找到一条最快到达目的地的路线时
背后的功臣之一就是Dijkstra算法
它就像一个聪明的导航员
在复杂的环境中
快速地计算出从用户当前位置到目的地的最优路线
我们可以把地图上的道路网络想象成一个巨大的图
每个路口或者地点就是图中的一个节点
而道路就是连接这些节点的边
节点与节点之间的距离可能会因为道路的类型、交通状况等因素而不同
Dijkstra算法就是要在这个复杂的图中
找到从起点到终点的最短路径
那么它究竟是如何做到的呢？
我们来详细看看
比如说
我们从一个城市的中心广场出发
这个广场就是我们的起点
我们标记为A点
从A点出发
周围有几条道路通向不同的地方
比如有一条道路通向一个公园
距离是1公里，我们把公园标记为B点；
还有一条道路通向一个商场
距离是5公里
我们把商场标记为C点
Dijkstra算法首先会比较从A点到B点和到C点的距离
发现到B点的距离更近
所以它会先“选择”通向B点的道路
当到达B点以后
它会继续查看从B点出发的其他道路
假设从B点有一条道路通向一个图书馆
距离是1公里
我们把图书馆标记为D点
那么从A点到D点的距离就是通过A到B再到D的路径长度
也就是1 + 1 = 2公里
同时
算法会不断更新它所知道的最短路径信息
如果在探索过程中发现有更短的路径可以到达某个节点
它就会立即更新
比如
我们发现从A点通过另一条路径经过一些其他节点最终也能到达C点
比如从A到B到D再到C
而且总距离是3公里
那么算法就会把A到D的最短路径更新为3公里
就这样
算法会不断地探索和更新最短路径信息
直到覆盖所有可能的节点
这个过程就像是我们在一个巨大的迷宫中寻找出口
Dijkstra算法会一步一步地探索
不断地排除错误的路径
最终找到正确的出口
也就是从起点到其他所有节点的最短路径
在计算机网络领域
Dijkstra算法同样发挥着至关重要的作用
我们可以把计算机网络想象成一个由无数个节点和边组成的巨大的图
这些节点可以是计算机、服务器、路由器等网络设备
而边则代表了设备之间的连接线路
当数据在网络中传输的时候
就需要找到一条最优的传输路径
从而确保数据能够快速、准确地从一个节点传输到另一个节点
Dijkstra算法就负责为这些数据规划出最优的传输路径
比如说
一个公司的内部网络中有很多台计算机和服务器
它们之间通过网线和路由器相互连接
当一台计算机需要向另一台计算机发送数据的时候
Dijkstra算法会根据网络的拓扑结构和节点之间的连接情况
计算出从发送方到接收方的最短路径
这样就可以避免数据在网络中绕路
从而提高数据传输的效率
除了地图和网络领域以外
Dijkstra算法在通信网络设计、机器人路径规划和物流运输优化等领域也都有着广泛的应用
在通信网络设计中
工程师需要考虑如何在多个基站之间建立最佳的连接方式
来保证信号的稳定传输
Dijkstra算法可以帮助工程师确定基站之间的最短路径
从而优化基站的布局和连接方式
在机器人路径规划中
机器人需要在一个复杂的环境中从起始位置移动到目标位置
这个环境中可能还有各种障碍物、不同的地形等等
Dijkstra算法可以根据环境的地图信息
为机器人规划出一条避开障碍物、最短的路径
让机器人能够高效地完成任务
而在物流运输优化中
物流公司需要为运输车辆规划出最佳的送货路线
从而减少运输成本和时间
Dijkstra算法可以考虑到各个送货地点之间的距离、道路状况、交通流量等因素
为车辆规划出最优的送货路线
那这个如此重要的算法是怎么诞生的呢？
这背后有一个非常有趣的故事
1956年
在荷兰有一位年轻的计算机科学家
他叫埃兹格·迪杰斯特拉（Edsger Dijkstra）
当时他只有26岁
迪杰斯特拉是一个非常有才华和创造力的人
他当时正在为一台新型计算机ARMAC编写一个程序
目的是为了展示这台计算机的计算能力
有一天
他和未婚妻在阿姆斯特丹的街头购物
逛了一会儿之后
准备在一家咖啡馆休息一下
就在这个看似平常的休息片刻，突然
一个计算最短路径的全新算法
犹如一道闪电在在迪杰斯特拉的脑中划过
令人惊讶的是
当时他的身边没有纸和笔
但是他凭借着自己强大的思维能力
花了大约20分钟
在脑海中仔细地推演出了算法的整个细节
就像他自己在晚年的一次采访中所说的那样
在没有纸笔的情况下
你几乎是被迫的避免所有可以避免的复杂性
也正是因为这种在特殊环境下诞生的简洁和优雅
Dijkstra算法在后来的几十年里
成为了计算机科学领域的经典
迪杰斯特拉的成长经历对他的学术成就
也产生了重要的影响
他出生在1930年，父亲是一位化学家
母亲是一位出色的数学家
在这样一个充满科学氛围的家庭中长大
迪杰斯特拉从小就对科学产生了浓厚的兴趣
1951年，在他父亲的建议下
他前往剑桥参加了一门为期三周的编程课程
这三周的经历对于他来说非常宝贵
在这期间
他遇到了著名的数学家和计算机科学家阿德里安·范·维恩加登（Adriaan van Wijngaarden）
并且因为这次相遇
他获得了在阿姆斯特丹数学中心（Mathematical Centre）的工作机会
还因此创造了一个历史
成为了荷兰首位以“程序员”身份被雇佣的人
1956年，迪杰斯特拉完成了学业
之后他继续在数学中心工作
在1959年
他发表了他的著名论文《关于图的两个问题的注释》（A Note on Two Problems in Connexion with Graphs）
这篇论文详细介绍了他提出的最短路径算法
这个算法一经提出
就引起了学术界的广泛关注
后来成为了计算机科学中引用次数最多的论文之一
不过
在当时发表这篇论文可不是一件容易的事情
因为那个时候几乎没有计算机科学期刊
迪杰斯特拉经过一番考虑
最终选择将论文发表在了新创刊的《数值数学》（Numerische Mathematik）杂志上
迪杰斯特拉在他的职业生涯中
不仅取得了非常辉煌的成就
也获得了很高的声誉
1972年
他获得了计算机科学领域最负盛名的图灵奖
不过他的贡献不仅仅局限于最短路径算法
他还在编程语言、操作系统和并发控制等领域
做出了很多基础性的贡献
他对编程方法学也有着深入的考虑
他强调程序的正确性
认为程序应该从一开始就正确地设计
而不是通过调试来达到正确
这种理念在当时引起了很多人的关注和讨论
同时
迪杰斯特拉也是一个充满争议的人物
他的性格非常独特
对于计算机科学的教育和研究有着非常强烈的观点
并且常常毫不避讳地发表自己的看法
比如说，他反对使用goto语句
并且在1968年发表了著名的文章《goto语句被认为是有害的》（Go To Statement Considered Harmful）
这篇文章一经发表
就引发了广泛的争议
很多人对他的观点表示赞同
但也有一些人持有不同的意见
不过
随着时间的推移和计算机科学的发展
最终他的观点还是得到了普遍认可
我们再回到Dijkstra算法本身
在最初的Dijkstra算法论文中
用到了一个关键的数据结构
堆（Heap）
这个数据结构在算法中起到了重要的作用
通常用来维护节点的优先级
以便快速获取最小或最大的元素
这个堆数据结构也给后来的科学家们留下了改进的空间
比如说在1984年
有两位计算机科学家设计了一种巧妙的堆数据结构
使得Dijkstra算法在解决单源最短路径问题所需的时间上
达到了理论极限，或者说“下限”。
从某种意义上说
这个版本的Dijkstra算法已经算是很不错的了
在最近40年来也算是一种“标准”。
然而，科学的脚步是不会停止的
在这次的最新研究中
研究人员又把目光投向了这个堆的数据结构
为什么呢？
因为他们发现像Fibonacci堆等常用的数据结构
虽然在理论上具有较好的最坏情况时间复杂度
但是在很多情况下
并没有充分利用图的局部结构特性
比如说局部的聚集性或者层次性
这就会导致在处理这类图的时候
会付出很高的计算代价
让算法变得低效
但是
如果在1984年设计的堆的基础上
加入对最近插入项快速访问的能力
就可以显著提升算法的效率
于是
研究人员提出了一种全新的堆数据结构
带有特殊的“工作集属性”（Working Set Property）的堆
这个“工作集属性”是什么意思呢？
我们可以把它想象成一个任务管理系统
在这个系统中
我们会优先处理那些刚刚添加的紧急任务
因为这些任务可能是当前最重要的
如果用公式表示
那就是对于在堆中插入并随后被提取的任意元素x
它的工作集W_包括了在x被插入后、在x被提取前插入的所有元素
以及x本身
借助这种“工作集属性”，
新设计的堆能够显著提升Dijkstra算法的整体性能
尤其是在具有局部特征的图上
这样一来
Dijkstra算法就不仅在最坏的情况下具有最优性
而且在任何图结构上都表现出色
也就是具备了普遍最优性
这就像给一辆汽车升级了发动机
让它不仅能够在平坦的公路上快速行驶
也能在崎岖的山路上表现出色
而且
这项工作还提供了精确的复杂度分析
比方说
作者证明了Dijkstra算法在具有工作集属性的并行堆上的比较次数是这样的
其中OPTQ(G)是解决距离排序问题的最优算法所需的比较次数
n是顶点数，∣FG,w∣是前向边的数量
这就为算法的性能提供了更精确的界限
让我们能够更准确地了解算法的效率和复杂度
这项研究的作者包括苏黎世联邦理工、CMU、普林斯顿等顶尖高校的科研人员
哥伦比亚大学的计算机科学家蒂姆·拉夫加登（Tim Roughgarden）在看完论文后都直呼
这也太神奇了
我无法想象还有比这更吸引人的研究
而且
这篇论文还斩获了FOCS 2024的最佳论文
充分说明了这项研究的重要性和创新性
好啦
今天关于Dijkstra算法的分享就到这里了
在被证明了普遍最优之后
大家在生活中就可以放心去使用Dijkstra算法
来帮助自己解决一些问题了
感谢大家的观看，我们下期再见
