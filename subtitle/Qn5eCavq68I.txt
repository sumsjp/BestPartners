大家好，这里是最佳拍档，我是大飞
最近科技圈有一个重磅消息
相信很多关注AI和编程领域的朋友
都已经听说了
那就是GitHub的CEO托马斯·多姆克（Thomas Dohmke）
宣布将在年底离职，转而投身创业
同时，Github不会再聘请新的CEO
而是将整个公司并入微软新组建的Core AI团队
作为全球最大的开发者社区和代码托管平台
GitHub一直以来都是开发者们的重要阵地
但是很快
它就会不再被仅仅视为一个“开发者社区”了
而是要成为微软AI工具链的底座了
这个转变
无疑显示出微软在AI编程领域的野心
也预示着未来AI编程工具的竞争
将会更加的激烈和多元化
在最新一期的Decoder节目中
托马斯·多姆克与主持人亚历克斯·希思（Alex Heath）
进行了一场精彩的对话
其中他提到了很多激进并且颇具争议的观点
比如，他直言
未来两年内90%的代码都可能由AI自动生成
开发者会出现新的阶层分化
以及AI 编程是通向超级智能的关键路径
今天我们就来回顾一下这场访谈的内容
看看在他的眼中
AI编程领域究竟将如何发展
首先
主持人询问目前AI编程发展到哪个阶段了
是不是像有些人想象的那样
完全不懂代码的人也能轻松创建应用或网站了呢？
多姆克认为，对于一些小的项目而言
现在已经达到了那个阶段
比如你想做一个贪吃蛇、乒乓球游戏
或者一些小的专用应用
那么你试试GitHub Spark或者Lovable
很容易就能成功
但是随着项目复杂度的增加
情况就不一样了
你需要具备一定的系统理解
比如架构设计、数据库等等
不过可以看到的是
AI编程平台的生成能力
正在以指数级的速度提升
以GitHub Spark为例
去年十月在GitHub Universe发布的时候
它只能创建运行在浏览器里的前端应用
使用JavaScript语言
仅支持一些浏览器端的操作
以及带有一点点的后端存储功能
而仅仅过去九个月的时间
现在新版的GitHub Spark
已经可以生成一个完整的全栈应用了
包含后端和数据库
以及连接AI模型等功能
可以说是进步巨大
不过，多姆克提醒道
从零开始创建一个东西，是一回事
而去修改一个已有的软件系统、弄清楚代码库中哪个功能
对应哪个测试用例
则是一件完全不同的事情
大多数的软件应用
随着时间的推移都会变得越来越庞大和复杂
其间可能有成百上千的工程师参与开发
AI要想能解决所有这些问题
还有很长的路要走
他曾经采访过一批外部的开发者
想要了解一下他们对AI编程现状的看法、目前的状况
以及对未来的预期
从反馈结果来看
大多数开发者已经意识到了
软件开发这个职业正在发生变化
尤其是那些使用过AI的开发者
他把这种变化称为“开发者的奥德赛”，
就像古希腊史诗《奥德赛》中描述的那样
软件工程师在AI时代要经历不断的适应、探索与成长的、漫长且充满挑战的历程
回顾历史
软件开发领域其实经历过了许多次的变革
从打孔机到大型主机
再到个人电脑的普及
极大地改变了开发的速度
从以前可能要预约主机的时间
到现在每个人的桌上都有一台个人电脑
从早年的汇编语言、Basic和Pascal
到如今的Python、Go和Ruby语言
从没有互联网到拥有数百万个开源库
能够直接从自己的服务器或者云端拉取代码
可以说
技术一直在不断提升它的抽象层次
而如今，开发全栈应用的工程师
很可能并不真正了解应用运行的CPU型号、内存大小、主频等具体的硬件参数
他们通常也不会写汇编代码
技术栈在自然地不断向上发展
人们管理的代码量也在过去50年里
呈现了指数级的增长
未来也还会继续陡峭的增长
因此，多姆克认为
我们需要这些AI工具来“拉平”这条曲线
这样我们才能继续应对如今拥有数十亿行代码的复杂应用
在他采访的开发者中，还有一半表示
他们相信在两年内
90%的代码将由AI来完成
对此，多姆克有着自己的理解
他认为，我们现在技术栈中90%的代码
其实都已经是别人写好的了
靠的是全球数百万开源开发者的贡献
无论是前端网页还是后端
90%可能都来自开源库、开源的操作系统、开源的编程语言和各种依赖
而工程团队只负责剩下的10%而已
GitHub和微软也是如此
所以，AI写出90%的代码
并不意味着开发者要停止写代码了
而是意味着开发者能够拥有
十倍于自己单独完成的代码量、功能和特性
就像开源推动了技术进步一样
AI也是对开发效率的一个巨大的放大器
不过，他也指出
不同的团队和公司
在AI的应用上会有很大差异
这不仅取决于他们是否愿意使用AI
还取决于他们如何设计架构、软件和基础设施
以及如何让AI Agent能够充分利用这些资源
但是可以想象到的是
会一种全新的应用架构方式即将出现
让Agent像搭乐高积木一样
更容易的组合新的功能
当然
还有很多公司运行着大量的老旧代码
比如使用PHP、Perl等语言编写的代码库
对于这些组织来说
想要摆脱这些遗留系统
经历云、数字化和AI转型
所需要的时间会远远超过那些站在技术前沿、让AI来生成90%以上代码的新公司
不过，这里面也有一个问题是
这些AI生成的代码
质量到底怎么样呢？
多姆克指出
根据最近Stack Overflow做的一项调查显示
超过80%的开发者表示
他们已经在使用或者计划在明年内使用AI工具
但是大约一半的受访者表示
他们对这些AI编程工具的准确性
持怀疑的态度
大约66%的人提到
AI生成的代码常常不够准确
导致他们不得不花大量的时间调试
甚至AI在编程上实际花费的时间
比它带来的生产力提升还要多
所以多姆克认为
到底有多少比例的代码是AI生成
其实没那么重要
重要的是
软件开发这个职业正在发生变化
技术栈在不断的提升
我们正在从理解每一行代码
更多的转向在规范说明之间进行切换
他进一步解释道
人类的语言本质上是非确定性的
两个人可能说同一句话
但是意思却不同
更别说不同语言在描述事物时用的结构也不一样
编程语言其实就是对处理器的一种抽象
本质上就是在描述
晶体管如何自动切换从0变到1的过程
所以问题其实是
你是想写更多的人类语言呢
还是想写更多的代码呢？
这也正是作为开发者的一种创造自由
你可以说我知道自己在做什么
我想写代码
也可以说我想用AI Agent来帮忙
事实上，对于Agent来说
最关键的问题是，是用Agent更快呢
还是自己动手更快呢？
如果自己三秒钟就能搞定
那用Agent反而是在浪费时间、精力和资源
但是反过来
如果AI写了自己九倍的代码量
那么开发者是不是要审查这些代码的质量、安全性和编码规范呢？
还是说，会让AI来帮着做这些工作呢？
在多姆克看来，最终
人类开发者都会被大量的Agent所淹没
因为这些Agent不会休息、不会周末放假
而且可以同时运行
多姆克认为，实际上
我们正在逐渐达到一个新的阶段
AI Agent生成的代码质量会持续超越人类
因为它们可以在无限的规模上运行
找到那些人类因为时间有限而无法发现的、所有的漏洞
人类要面对的挑战会变成
我们是否能信任这些代码呢？
正如GitHub的诞生
其实也是为了促进人类之间的协作
GitHub的核心
说白了就是有一个开源项目
别人可以fork这个项目
如果你喜欢或者想添加些什么功能
就发起一个pull request
不过这时代码不会直接合并到代码库里
相反
项目的所有者们都会来审核这段代码
给出对应的反馈
以及最终决定是否合并
这其实就是人类之间协作的一种质量控制
当然，我们也可以用同样的流程
来实现人类和Agent的协作
只不过如果有成千上万个Agent
那我们可能就得重新来思考这个流程了
这将是开发者工具最大的一个差异点
也就是谁能搞清楚
如何让Agent生成比人类多得多的代码
同时又让人类来保持控制权
确保代码能够投入生产、处理客户的数据、计费流程等等
这才是未来几年的挑战
不是看Agent能写多少代码
而是看我们能够接受多少由Agent写的代码
进入到生产系统中
在此基础上，多姆克认为
未来会有一类开发者
他们专门使用模型和Agent
来构建并且验证系统
他们要做的只是写一个提示词
这在图像生成模型中可能已经开始出现了
比如用ChatGPT生成一张吉卜力风格的图像
你不需要写生成图像的代码
只需要给出指令
然后模型就会来帮你完成
还有一类开发者会依然热爱着写代码
他们会将部分工作交给AI Agent来完成
比如写测试用例、文档那些他们不喜欢做的事情
从而腾出时间去做自己真正热爱的事
其实在现在
无论是大公司还是小公司
大多数开发者每天真正花在写代码的时间
可能都不到四个小时，有时甚至更少
剩下的时间则都花在了开会、写邮件、审查他人的代码、更新服务等各种的琐事上
即使这样
大多数人也会保留一定时间
用来写代码或者写指令生成的代码
这会让他们感觉自己依然在编程
这就好比我们现在几乎都不会写汇编语言了
并不是汇编不存在了
而是因为我们有了编译器
可以把高级编程语言编译成汇编代码
现在
我们可以把AI模型看作是一个编译器
它把人类语言的指令
编译成编程语言
然后再让真正的编译器
把编程语言转成了汇编代码
只不过现在的问题是
目前的模型仍然会出现幻觉
写出来的代码也不一定完全符合你的预期
所以我们无法直接跳过
将人类语言转换成编译语言的那一层
那么，是否会有那么一天
即使是完全不懂编程、分不清各种语言的人
也能够可靠地通过自然语言
来构建需要访问各种API、数据库、网页等功能的应用呢？
对于这一点，多姆克认为
只要范围受限，其实是能够实现的
而且这个范围会逐渐的扩大
我们现在能够跟AI Agent对话
让它帮你来生成一张图表
实际上
它就是在帮你写一段Python脚本
然后用这段脚本来生成图表
你也可以让ChatGPT把这段Python脚本展示给你看
不过
大多数用户根本不需要去理解这段Python代码
只要看图表就行了
所以像这样的应用场景会快速的增长
但是对于一些专业的软件系统来说
这个问题就变得比较复杂了
因为现在的专业开发者能够在同样时间里
构建更多的功能了
今天我们称之为“最先进”的软件
已经远比我们能想象到的复杂得多了
事实上，这也一直都是如此
比如现在的iPhone
它的功能要远远强过90年代初的Commodore 64
当年为Commodore 64开发应用的程序员
如果看到如今的iPhone应用
一定会觉得这简直就是魔法
就像我们看待AI一样
接下来
两人聊到了AI编程领域的竞争
编程可以说是目前AI领域竞争最激烈的一部分之
也有很多的收购交易在进行
而且很多历史上增长最快的公司
都是AI编程公司
比如Cursor、Lovable等等
主持人提到
虽然GitHub Copilot是最早进入AI编程助手领域的产品
但是有人认为，过去一年
GitHub Copilot似乎在一定程度上失去了市场的关注度
至少在一些对这类技术痴迷的小圈子里是这样
多姆克并不同意这种看法
他认为整个AI、大语言模型
以及这些模型能实现的可能性
正在以非常快的速度发展
在科技领域
他从来没有见过这样的局面
更何况
AI代码生成正站在这场创新浪潮的最前沿
因为所有这些公司都会雇佣开发者
大家都有内在的动力让编程变得更加容易
这就意味着可以更快的创新
对于GitHub来说
他们一直明白
自己是整个生态系统的一部分
无论是在AI代码生成领域
还是在CI/CD、应用构建等方面
他们既与行业内的公司竞争
也跟它们合作
就像没有人愿意看永远只有一支球队赢球的比赛一样
所以，GitHub赢了一些
也失去了一些
有时甚至是每周都在发生变化
多姆克承认
Copilot在从单模态到多模态的转变上
起步较晚
在去年的十月才终于实现了这一步
引入了AIC的支持，构建了MCP集成
但是他也认为，一家公司的真正考验
从来不在它的炒作浪潮中显现
而是在面对巨大压力的时候
它所展现出来的韧性
在面对各种限制的情况下
少许的坚韧或许就能赢得比赛
公司里的资源总是有限的
包括预算、员工人数等等
你不可能无限制地一直增加人员
因为那会遇到所谓“人月神话”的问题
也就是增加更多的人
反而会拖慢团队的速度
所以，无论公司规模大小
都必须做出取舍
正如苹果公司的一句slogan
每个“Yes”需要1000个“No”。
主持人随后把话题引到了竞争对手Cursor上
它曾经受到了一些用户群体的追捧
被认为扛起了AI编程的大旗
多姆克认为
Cursor成功的关键是因为他们认识到了
要解决的问题
不仅仅是把AI加入到传统的IDE里
而是要改变整个IDE本身
设计一种“AI原生”的工作流
也就是从根本上思考
如果AI是一项默认配置
而非一项附加功能
开发者该如何工作呢？
也正因为如此
他们是第一个基于GPT-3.5版本开发的Copilot产品
如今Cursor仍然走在行业的前沿
并且意识到了应该让多模型共同发挥作用
给开发者相应的选择权
让他们可以去挑选最适合自己的模型
而不是替他们来做决定
这和GitHub之前的理念不同
GitHub当时做了大量的测试
来评估各种模型
然后选出认为最好的那个
这是由于每种编程语言、每个测试场景
不论是生成功能的代码还是测试的代码
评分标准都是不一样的
所以它们才会通过综合判断
来评估哪个模型的总体表现更好
多姆克指出
根据开发者工具的发展历史
给开发者提供选择权永远是最好的做法
让他们自己来决定用哪个模型
在如今的市场格局里
如果不提供多模型的选择
不拥有被大多数开发者认可的最佳模型
不允许开发者带入自己的模型
没有运行在IDE中的Agent模式等等
根本就无法在AI编程领域竞争
他喜欢用F1赛车来比喻竞争
就像有些车队赢得了整个赛季
但是下一个季度却落后了
不过他们不会因此认定自己再也赢不了了
而是会把这当作动力去重新思考
他还指出，AI编程的领域变化非常快
关键还在于模型本身
最好的模型会经常变化
比如Llama3曾经是个不错的模型
Llama4就不那么出色了
Anthropic现在似乎是代码领域的王者
但是也许几个月后OpenAI就会重新领先
多姆克提醒道，在科技领域
我们常常会有一种观念
觉得一个赢了就意味着另一个必输
但是事实证明并非如此
比如Windows和Mac OS、iPhone和Android
实际上，在开发者工具领域
这种“非此即彼”的情况也从未出现过
否则今天也不会有数十种编程语言存在
所以多姆克认为
GitHub Copilot的竞争对手
比如Cursor、Lovable、Windsurf这些工具的使用者
他们的源代码实际上都是存储在GitHub上的
他们的Issues和项目也都是在GitHub上管理的
CI/CD流程也是在GitHub上运行的
甚至很多竞争对手也是在微软的云服务上运行的模型推理
因此，GitHub既是竞争者
也是整个生态系统的一部分
也会从整个软件生态系统性的规模增长中受益
所以他认为，软件开发只会越来越多
不会减少
同时开发者的人数也在增加
至于Anthropic在编码方面为什么这么强
多姆克解释道
Claude Sonnet真正胜过其他模型的地方
恰恰在于对“工具的使用”，
也就是模型为Agent的下一步
选择合适工具的能力
这说明
训练不仅仅局限于编程语言、代码等等内容
还包括要训练模型像开发者一样
能够合理的使用各种工具
如果这一步失败了
那么Agent模式就会崩溃
比如Agent无法安装一个JavaScript依赖的NPM包
这样一来
即使Agent拥有世界上最好的训练数据集
如果它完成不了这一步
整个流程也就无法正常的工作
Anthropic正是很早就洞察到了这方面
或者说拥有了更好的测试手段
从而赢得了领先地位
但是有趣的是，可能过段时间
这个局面又会发生变化
接下来
多姆克透露了一些微软和OpenAI的合作进展
微软目前正在和OpenAI商讨双方未来新的企业关系
因为OpenAI正在从非营利机构转为营利机构
而微软显然是重要的大股东
目前拥有IP的独家访问权
所以多姆克认为
对于GitHub和所有的开发者来说
这段关系始终需要保持健康
双方的合作方式必须是互惠互利、相互支持的
正如最初的Copilot正是OpenAI和微软合作的产物
当时OpenAI开发了GPT-3和Codex模型
而微软不仅拥有超大规模的基础设施
还有多年在AI扩展和运算方面的经验
正是GitHub、微软和OpenAI之间的这种创新合作
才创造了如今这个拥有众多竞争者的市场
以及未来还会有更多新的竞争者加入
在微软的财报中
GitHub Copilot现在拥有2000万用户
环比增长高达75%，
财富100强的企业中有90家在使用
而且这里的2000万用户
是指有2000万GitHub用户开启了Copilot功能
所以这个数字对应的GitHub总账户数量
应该在1.5亿左右
另外，在VS Code上还有5500万的用户
最后
对于大家经常提在嘴边的AGI和所谓的超级智能的说法
多姆克表示自己并没有对它们的清晰定义
因为他觉得这些定义其实也没那么重要
除非是在合同里规定的
或者说这些概念就是个很好的营销工具而已
他认为
所谓的AGI或者ASI到来的决定性时刻
应该是AI能够实现自我提升的那一刻
比如模型可以不需要人类的干预
直接从GPT-4跳到GPT-5
或者说，当AI能够像个小孩子一样
从会被一个笑话逗笑
进步到会自己讲笑话的阶段
我们才能真正的说AGI出现了
多姆克认为
我们追求的不应该是实现某个目标
那只能是说明在问题和答案之间建立了良好的对应关系
只有能够不断自我进化和提升的AI
才是真正意义上的、也是我们人类能够认可的智能
好了
以上就是GitHub CEO托马斯·多姆克这场对话的主要内容了
希望能给大家带来一些最新的关于AI编程领域的观点
感谢收看本期视频，我们下期再见
