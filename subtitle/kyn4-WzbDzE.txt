大家好，这里是最佳拍档，我是大飞
前几天，2月29日的下午
有消息称禾赛科技激光雷达存在固件bug
导致凡是用了禾赛激光雷达的车
自动驾驶功能全部歇菜
禾赛科技是国内知名的激光雷达头部企业
是全球车载激光雷达行业
首个单月交付量突破 5万的公司
有媒体向禾赛科技官方求证
禾赛科技回应称
有2个老款的L4机械式激光雷达
今天出现了软件bug
目前问题原因已经找到
预计24小时内彻底解决
那究竟是什么问题呢
敏感的同学可能已经想到了
没错，就是闰年导致的bug
我们都知道
闰年指的是这一年有366天
也就是比平常年份多出一天
闰年是为了弥补因人为历法规定的年度天数365日
和平均回归年的大约365.24219日的差距而设立的
多出来的一天为2月29日
也就是说今年的3月1日晚了24小时
这种情况每四年发生一次
对于软件系统的开发者来说
闰年就是一次小考验
它强制要求大家必须在应用程序中考虑少见、但是不可避免的事件
不过，因为这个日历上的小小变化
而造成软件bug和中断问题的不止禾赛科技一家
虽然四年前才刚发生过一次
但是显然到现在还有很多公司没有做好准备
我们首先得点名的是“OpenAI”。
有多位网友反馈OpenAI ChatGPT 3.5认为“2024-02-29”不是有效日期
由于这个问题
至少有一名OpenAI API的用户
在自己的应用程序中遇到了故障
他们有一个通过API使用ChatGPT的产品
使用的是3.5 Turbo版本
其中某些查询功能会涉及到日期
2月29日这一天
它没有像通常那样返回正确的文本
而是一直提示错误
新西兰的多处加油站也遭遇了自助支付终端问题
根据《新西兰先驱报》报道
闰年导致的软件Bug
影响了全国所有的无人值守加油站
因为新西兰所有燃料公司
都使用的是一家技术提供商Invenco
原因是该系统没有处理2月29日这一日期
故障导致刷卡支付机停机了10多个小时
目前全国各地的加油站已重新恢复运行
而Invenco的首席执行官约翰·斯科特 (John Scott) 表示
我们清楚地知道闰年
过去20到30年来我们一直在与它们打交道
哥伦比亚最大的航空公司也因为闰年问题而打印出错误的机票
阿维安卡航空公司 (Avianca) 打印的机票日期为3/1
而不是2/29
因为他们的系统没有考虑闰日
一位旅客分享了该航空公司向客户发送的电子邮件
上面写到
我们通知您
如果您的航班日期为 2024年2月29日
您的登机牌上的航班日期可能会存在差异
为了确保您获得正确的信息
请从网站或者应用程序重新下载
印度新发布的智能手表也无法显示正确的日期
Fastrack FS1是印度公司Fatrack于2023年3月
最近发布的一款智能手表
有多份报告称该款手表在2月28日晚上11点59分之后
不再继续跳动
Fastrack 已经承认存在故障
并表示正在努力修复
但显然这个问题花了8个小时还没得到解决
令大飞没想到的是
油管也收到了影响
有用户表示无法购买YouTube Premium订阅
油管的年龄验证逻辑
认为他们未满18岁
因为他们是在闰日出生的
这位用户发帖称
如果按照YouTube Premium的计算方法
他们需要等到70岁之后才能够购买
甚至就连EA Sports的赛车游戏都崩溃了
EA SPORTS WRC
中文名世界拉力锦标赛是一款拉力赛车游戏
是2023年11月发布的
适用于Windows、Xbox和Playstation平台
2月29日这天这个游戏显然玩不了了
因为它崩溃了
考虑到游戏行业比其他大多数公司
在游戏质量保证和测试方面的投入更多
这次崩溃着实有点让人难以理解
EA Sports建议的解决方法是
将你的系统日期设置为3月1日
或者今天就休息一下
看来EA也是不打算解决这个bug了
其实不光是今年
过往的闰年也已经闹出过不少影响巨大、引人注目的 bug了
比方说
2012年微软Azure云服务曾经遭遇中断
因为证书到期日期的计算错误
导致服务中断长达12个小时
2010年索尼PlayStation网络中断的根源
正是系统将2010年错误识别成了闰年
2008年微软Zune设备集体变成板砖
罪魁祸首就是12月31日逻辑错误
2008年微软Exchange管理bug
导致管理员在2月29日无法执行大部分操作
Lotus 1-2-3对1900年的计算错误
直到30多年后的今天
也仍是笼罩在微软Excel头顶的阴影
这些还都是登上头条的大新闻
相信肯定还有不计其数的小问题也曾发生
在不同程度上影响到了很多无辜用户和项目开发者
虽然闰年的bug随处可见
但是在C/C++代码中惹出的麻烦最大
可能导致应用程序崩溃或者缓冲区溢出
首先是在使用Win32 API的C/C++代码当中
SYSTEMTIME结构经常会作为民用时间的表示方式
它会将日期中的各个部分设为不同的字段
具体分隔为年、月、日值和其他值
正常的时候
这段代码都能够顺利运行
不会报出任何错误
但是风险在于
如果在2月29日调用这段代码
那么结果值仍将是2月29日
但是结果日期的年份很可能并非闰年
例如2016-02-29加1年等于2017-02-29
而2017年根本就没有2月29号
另一种情况是
当我们为一年中每一天的值声明一个数组的时候
如果遇到闰年
数组就无法给第366天的12月31日留出位置了
这可能会导致缓冲区溢出
具体影响也是可大可小
闰年bug还会造成其他影响
比如在数据过滤时
会影响到上一年2月29日到次年3月1日之间的任意数据
如果我们在范围查询不考虑到额外的闰日
也就是假设一年始终只有365天
或者假设2月始终只有28天
那么在这句SQL查询中
如果把其中的@enddate设定为今天
再把@startdate 设置为今年再减去365天
那么当查询范围内恰好包含2月29日闰日的时候
它就无法涵盖一整年
因为开始日期少了一天
所以过滤得出的值不正确
那么在编程时应该如何解决闰月的问题呢，.
NET上的正确解决方案是使用AddYear(-1)，
这个方法方法正确实现了所有必要逻辑
可以确定要向未来移动多少天
或者在取负值时代表向过去移动多少天
JavaScript的开发者应该使用moment
js，而且非常简单
有人可能会喜欢用这样的写法
但是问题在于
如果今天是闰年的2月29日
那么结果值将为3月1日
所以如果你的应用软件对月底和月初非常敏感
就不能这样做
如果不想使用第三方库的话
也可以使用这样的JavaScript函数
来正确添加年份，切记
尽量不要具体计算需要添加的天数来解决问题
那样更容易出错
那除了我们上面提到的这些bug
开发人员还会经常犯哪些跟闰年相关的错误呢
比如他们会弄错闰年算法
闰年绝对不是固定每四年一次
对于不能被100整除的年份才是每四年一次
能被400整除的除外
也就是说，1900年并不是闰年
其次就是为每个月使用天数的数组
其中二月只有28天
如果你要使用这种数组的方式
必须考虑闰年的第29天
更好的办法当然是为闰年创建一套跟平年不同的数组
或者直接使用API
尽量别自己亲自计算
另外一种情况就是开发人员考虑到了闰年的情况
并且针对闰年为代码创建了一个分支
但是没有测试所有的代码路径
例如
Zune设备出现bug的代码顶部就有一个 ISleapYear的分支
但是微软显然从来没测试过这个分支
还有就是使用了单独的年、月和日
但是却不对它们进行验证
比方说
我们可能有一个带有单独下拉菜单的日期控件UI
那么只测试某个日期在特定月份内是否有效还不够
我们还得把年份也考虑进来
那作为软件开发人员
我们应该如何做
才能发现闰年的bug呢？
首先应该认真检查你的代码
搜索一切跟时间相关的内容
然后仔细梳理
其次就是确保进行充分的单元测试
并且了解如何正确地模拟时钟
对系统进行全年测试
而并不是只在闰年之前测试
对所有所有输入进行验证
包括配置的部分
有很多朋友还经常会提到另外两种方法
一种是使用静态代码分析工具
来帮你发现常见的日期/时间bug
另一种是直接把时间快进到下一个闰日
看看会发生什么
总的来说
闰年虽然不像当初的千年虫那样搞得举世震惊
但它无疑也是个刺头、而且每隔几年就跑出来恶心人
过去四年间大家写了多少代码？
有人敢保证一切都符合标准吗？
所以没事可以多花点时间扫描并测试自己的代码
总比到时候出了问题
被上司打爆电话，熬夜修bug的要强
好了，本期视频内容就到这里
感谢大家的观看，我们下期再见
